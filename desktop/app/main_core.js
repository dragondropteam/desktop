function fillEditMenu(e){e.Edit=[],e.Edit.push({label:"Undo",accelerator:"CmdOrCtrl+Z",selector:"undo:"}),e.Edit.push({label:"Redo",accelerator:"Shift+CmdOrCtrl+Z",selector:"redo:"}),e.Edit.push({type:"separator"}),e.Edit.push({label:"Cut",accelerator:"CmdOrCtrl+X",selector:"cut:"}),e.Edit.push({label:"Copy",accelerator:"CmdOrCtrl+C",selector:"copy:"}),e.Edit.push({label:"Paste",accelerator:"CmdOrCtrl+V",selector:"paste:"}),e.Edit.push({label:"Select All",accelerator:"CmdOrCtrl+A",selector:"selectAll:"})}function flattenMenu(e){let o=[];for(let t in e)o.push({label:t,submenu:e[t]});return o}function fillRecentProjects(e){let o=[];projects.getRecentProjects().forEach(e=>{e=new projects.LoadedProject(e.loadedProject,e.loadPath),o.push({label:`${e.getName()} - ${e.loadedProject.type}`,click(){loadProjectFromPath(e.getProjectPath())}})}),e.File.push({label:"Load Recent Project",submenu:o})}function addMacOSX(e){if("darwin"===process.platform){const o=electron.app.getName();e[o]=[],e[o].push({role:"about"},{type:"separator"},{role:"services",submenu:[]},{type:"separator"},{role:"hide"},{role:"hideothers"},{role:"unhide"},{type:"separator"},{role:"quit"})}}function addToggleDevTools(e){e.View=[{label:"Toggle Developer Tools",accelerator:"CmdOrCtrl+Shift+I",click(e,o){o&&o.webContents.toggleDevTools()}}]}function createDefaultMenu(){let e=Object.create(null);addMacOSX(e),e.File=[],e.File.push({label:"New Project",accelerator:"CmdOrCtrl+N",click(){createProject()}}),e.File.push({label:"Load Project",accelerator:"CmdOrCtrl+O",click(){loadProjectDialog()}}),fillRecentProjects(e),e.File.push({label:"Preferences",accelerator:"CmdOrCtrl+,",click(){createPreferenceWindow()}}),fillEditMenu(e),addToggleDevTools(e);let o=Menu.buildFromTemplate(flattenMenu(e));Menu.setApplicationMenu(o)}function createPreferenceWindow(){preferencesWindow||((preferencesWindow=new BrowserWindow({width:600,height:500,resizable:!1})).loadURL("file://"+__dirname+"/static/settings.html"),preferencesWindow.once("ready-to-show",()=>{preferencesWindow.show()}),preferencesWindow.on("close",()=>{preferencesWindow=null}))}function createProjectMenu(e){let o=Object.create(null);addMacOSX(o),o.File=[],o.File.push({label:"New Project",accelerator:"CmdOrCtrl+N",click(){createProject()}}),o.File.push({label:"Save Project",accelerator:"CmdOrCtrl+S",click(){mainWindow.webContents.send("save_project")}}),o.File.push({label:"Save Project As",accelerator:"CmdOrCtrl+S+Shift",click(){if(null==loadedproject)return;const e=dialog.showSaveDialog({options:{title:"Create Project",defaultPath:app.getPath("home")}});if(!e)return;const o=require("path");let t=ProjectInterface.createProjectDir(o.basename(e),e);null!==t&&(fs.existsSync(loadedproject.getBlocksPath())&&fs.copy(loadedproject.getBlocksPath(),t.getBlocksPath(),function(e){e?dialog.showErrorBox(`Could not save ${t.getName()}`,e.message):displayProject(t)}),fs.existsSync(o.join(loadedproject.loadPath,loadedproject.getName(),"js"))&&fs.copy(o.join(loadedproject.loadPath,loadedproject.getName(),"js"),o.join(t.loadPath,t.getName(),"js"),function(e){e&&dialog.showErrorBox(`Could not save ${t.getName()}`,e.message)}),fs.existsSync(o.join(loadedproject.loadPath,loadedproject.getName(),"assets"))&&fs.copy(o.join(loadedproject.loadPath,loadedproject.getName(),"assets"),o.join(t.loadPath,t.getName(),"assets"),function(e){e&&dialog.showErrorBox(`Could not save ${t.getName()}`,e.message)}))}}),o.File.push({label:"Load Project",accelerator:"CmdOrCtrl+O",click(){loadProjectDialog()}}),fillRecentProjects(o),o.File.push({label:"Preferences",accelerator:"CmdOrCtrl+,",click(){createPreferenceWindow()}}),o.File.push({label:"Archive Project",click(){const o=path.join(app.getPath("documents"),"DragonDropProjects",`${e.loadedProject.name}.zip`),t=require("zip-folder"),r=dialog.showSaveDialog(mainWindow,{title:"Archive Project",defaultPath:o,filters:[{name:"ZIP Files",extensions:["zip"]}]});r&&t(e.loadPath,r,e=>{e?dialog.showErrorBox("Archive Failed",`Could not archive project\n${e.message()}`):dialog.showMessageBox({title:"Project Archived",message:`Successfully archived project to\n${r}`,buttons:[]})})}}),fillEditMenu(o),addToggleDevTools(o),ProjectInterface.mutateMenu(o,e,()=>{Menu.setApplicationMenu(Menu.buildFromTemplate(flattenMenu(o)))},()=>{dialog.showErrorBox("Could not create menu","Menu could not be created!")},createProjectMenu)}function createProject(){createProjectWindow||((createProjectWindow=new BrowserWindow({width:900,height:600,show:!1})).once("ready-to-show",()=>{createProjectWindow.show()}),createProjectWindow.on("closed",()=>{createProjectWindow=null}),createProjectWindow.loadURL(`file://${__dirname}/static/new_project.html`))}function loadProjectDialog(){const e=require("electron").dialog,o=require("electron").app,t=path.join(o.getPath("documents"),"DragonDropProjects");console.log(t);const r=e.showOpenDialog(mainWindow,{title:"Load Project",defaultPath:t,filters:[{name:"Dragon Drop Project",extensions:["digiblocks"]}]});r&&loadProjectFromPath(r[0])}function displayProject(e){loadedproject=e,projects.addToRecentProjects(e),app.addRecentDocument(e.getProjectPath());const{width:o,height:t}=electron.screen.getPrimaryDisplay().workAreaSize;let r=new BrowserWindow({width:o,height:t,show:!1});r.once("ready-to-show",()=>{r.show()}),mainWindow&&mainWindow.close(),mainWindow=r,ProjectInterface.displayProject(r,global.development,e),createProjectMenu(e)}function loadProjectFromPath(e){let o=fs.readJsonSync(e),t=(ProjectInterface=require(projectTypes.getRequirePath(o.type||"wink"))).loadProject(e);null!==t?displayProject(t):dialog.showErrorBox("Could not open project",`Could not open project at ${e}`)}let index="index.html";global.selectedPort=null,exports.setIndex=function(e){index=e};const electron=require("electron"),packageJSON=require("./package.json");global.version=packageJSON.version;const BrowserWindow=electron.BrowserWindow,menu=require("./menu"),Menu=electron.Menu,path=require("path"),{dialog:dialog}=require("electron"),{app:app}=require("electron"),{ipcMain:ipcMain}=require("electron"),projects=require("project"),fs=require("fs-extra"),projectTypes=require("project_types"),arduinoCore=require("arduino_core");let preferencesWindow;ipcMain.on("refresh_menu",(e,o)=>{createProjectMenu(o)});let createProjectWindow;ipcMain.on("create_project",createProject);let ProjectInterface=require("./project_types/wink_robot");ipcMain.on("create_new_project",(e,o,t)=>{let r=(ProjectInterface=require(projectTypes.getRequirePath(t))).createProjectDir(o.name,o.path);if(r)displayProject(r);else{const{dialog:e}=require("electron");e.showErrorBox("Could not create loadedProject","Check the path and try again!")}createProjectWindow&&(createProjectWindow.close(),createProjectWindow=null)});let promptResponse;ipcMain.on("prompt",function(e,o){promptResponse=null;let t=new BrowserWindow({width:300,height:200,show:!1,resizable:!1,movable:!1,alwaysOnTop:!0,frame:!1});o.val=o.val||"";const r='<label for="val">'+o.title+'</label>  <form>  <input id="val" value="'+o.val+"\" autofocus />  <button type=sumbit onclick=\"require('electron').ipcRenderer.send('prompt-response', document.getElementById('val').value);window.close()\">Ok</button>  <button type=button onclick=\"window.close()\">Cancel</button>  </form>  <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style>";t.loadURL("data:text/html,"+r),t.show(),t.on("closed",function(){e.returnValue=promptResponse,t=null})}),ipcMain.on("prompt-response",function(e,o){""===o&&(o=null),promptResponse=o});let codeWindow;ipcMain.on("show_code",function(e,o){(codeWindow=new BrowserWindow({width:800,height:600})).loadURL("file://"+__dirname+"/code.html"),codeWindow.webContents.on("did-finish-load",()=>{codeWindow.send("show_code",o)}),codeWindow.webContents.on("closed",()=>{codeWindow=null})});let loadedproject;ipcMain.on("load_project",(e,o)=>{loadProjectFromPath(o)});let mainWindow=null;app.on("window-all-closed",function(){"darwin"!==process.platform&&app.quit()});let projectToLoad=null;app.on("ready",function(){const e=require("yargs")(process.argv.slice(1)).argv;createDefaultMenu(),projectToLoad?loadProjectFromPath(projectToLoad):(mainWindow=new BrowserWindow({width:600,height:500,resizable:!1}),e._.length>=1&&!process.defaultApp?loadProjectFromPath(e._[0]):mainWindow.loadURL("file://"+__dirname+"/projects.html"),mainWindow.on("closed",function(){mainWindow=null}))}),app.on("open-file",(e,o)=>{console.log(`open ${o}`),e.preventDefault(),app.isReady()?loadProjectFromPath(o):projectToLoad=o}),ipcMain.on("update_arduino_path",(e,o)=>{"darwin"===process.platform&&(o=path.join(o,arduinoCore.macPrefix)),arduinoCore.setArduinoPath(o),preferencesWindow&&preferencesWindow.close()}),ipcMain.on("cancel_settings",()=>{preferencesWindow&&preferencesWindow.close()}),ipcMain.on("load_project_dialog",()=>{loadProjectDialog()}),ipcMain.on("update_settings",()=>{mainWindow&&mainWindow.send("settings_updated")});