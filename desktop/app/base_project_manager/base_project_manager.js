const fs=require("fs-extra"),{LoadedProject:LoadedProject,Project:Project}=require("../project/projects"),path=require("path"),{app:app,ipcMain:ipcMain}=require("electron"),log=require("electron-log"),zipFolder=require("zip-folder");module.exports=BaseProjectManager=class{constructor(e,t,r){this.buildNumber=e,this.type=t,this.staticRoot=r}createNewProject(e,t,r){console.log(`Creating project ${e} at ${t} with version ${r}`);try{fs.ensureDirSync(t);const o=fs.mkdtempSync(path.join(app.getPath("temp"),"dragondrop"));this.createProjectDir(e,o),this.copyBaseFiles(e,o);let a=new Project(e,r,this.type,this.createMeta());return fs.writeJsonSync(path.join(o,`${e}.digiblocks`),a),zipFolder(o,path.join(t,`${e}.drop`),r=>{r?log.error(r):log.debug(`Created project at ${path.join(t,e)}`)}),new LoadedProject(a,o,path.join(t,`${e}.drop`),this,"drop")}catch(e){return console.error(e),null}}createProjectDir(e,t){if(!path.isAbsolute(t))throw new Error("filePath must be an absolute path");fs.ensureDirSync(t),fs.ensureDirSync(path.join(t,e))}copyBaseFiles(e,t){}createMeta(){throw new Error("Invalid operation calling abstract BaseProject.createMeta")}loadProject(e,t,r){const o=new LoadedProject(e,t,r,this,path.extname(r).substr(1));return log.debug(path.extname(r).substr(1)),(e.meta&&e.meta.version<this.buildNumber||!e.meta||!e.type)&&this.migrate(o),o}migrate(e){throw new Error("Invalid Operation calling abstract BaseProject.migrate")}mutateMenu(e,t,r,o,a){throw new Error("Invalid Operation calling abstract BaseProject.mutateMenu")}saveProject(e,t){if(fs.outputJsonSync(e.getProjectPath(),e.loadedProject),t)for(let e=0;e<t.length;++e)fs.writeFileSync(t[e].path,t[e].data);".drop"===path.extname(e.projectPath)&&zipFolder(e.loadPath,e.projectPath,e=>{e&&console.error(e)})}migrateMetaAndProjectType(e){e.loadedProject.meta&&e.loadedProject.type||(e.loadedProject.meta=this.createMeta(),e.loadedProject.type=this.type)}displayProject(e,t,r){const o=t?"index_dev.html":"index.html";e.loadURL(`file://${this.staticRoot}/${o}`),ipcMain.once("render_ready",()=>{e.send("set_project",r)})}};