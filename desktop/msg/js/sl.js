// This file was automatically generated.  Do not modify.
'use strict';
goog.provide('Blockly.Msg.sl');
goog.require('Blockly.Msg');
Blockly.Msg.A = "a";  // untranslated
Blockly.Msg.ACCELERATE = "accelerate";  // untranslated
Blockly.Msg.ACCELERATEMOTORS = "accelerate motors";  // untranslated
Blockly.Msg.ACCELERATEMOTORS_END = "end speed";  // untranslated
Blockly.Msg.ACCELERATEMOTORS_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.ACCELERATEMOTORS_START = "start speed";  // untranslated
Blockly.Msg.ACCELERATEMOTORS_TOOLTIP = "Accelerates from the start to the end speed over the specified duration";  // untranslated
Blockly.Msg.ACCELERATION = "acceleration";  // untranslated
Blockly.Msg.ACCELERATION_FROM_ROTATION = "get forward acceleration from rotation";  // untranslated
Blockly.Msg.ACCELERATION_FROM_ROTATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#accelerationFromRotation";  // untranslated
Blockly.Msg.ACCELERATION_FROM_ROTATION_SPEED = "pixels/second^2";  // untranslated
Blockly.Msg.ACCELERATION_FROM_ROTATION_TOOLTIP = "Given the rotation (in radians) and speed, calculate the acceleration and return it as a Point object.";  // untranslated
Blockly.Msg.ADD = "add";  // untranslated
Blockly.Msg.ADDEMITTER = "add emitter";  // untranslated
Blockly.Msg.ADDEMITTER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html";  // untranslated
Blockly.Msg.ADDEMITTER_MAXPARTICLES = "maxParticles";  // untranslated
Blockly.Msg.ADDEMITTER_TOOLTIP = "Create a particle emitter";  // untranslated
Blockly.Msg.ADDSPRITEWITHATLAS = "load atlas image";  // untranslated
Blockly.Msg.ADDSPRITEWITHATLAS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Loader.html#atlasXML";  // untranslated
Blockly.Msg.ADDSPRITEWITHATLAS_SOURCE = "spritesheet source";  // untranslated
Blockly.Msg.ADDSPRITEWITHATLAS_TOOLTIP = "Loads a texture atlas into the game. These take more effort to set up, but can contain every animation you want for a single character. See the help for more info.";  // untranslated
Blockly.Msg.ADD_ANIMATION = "add animation to";  // untranslated
Blockly.Msg.ADD_ANIMATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#add";  // untranslated
Blockly.Msg.ADD_ANIMATION_TOOLTIP = "Add an animation to an object based on a list of frames";  // untranslated
Blockly.Msg.ADD_ANIMATION_VI = "add animation to";  // untranslated
Blockly.Msg.ADD_ANIMATION_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#add";  // untranslated
Blockly.Msg.ADD_ANIMATION_VI_TOOLTIP = "Add an animation to an object based on a list of frames";  // untranslated
Blockly.Msg.ADD_CHILD = "add child object";  // untranslated
Blockly.Msg.ADD_CHILD_AT = "add child";  // untranslated
Blockly.Msg.ADD_CHILD_AT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#addChildAt";  // untranslated
Blockly.Msg.ADD_CHILD_AT_TOOLTIP = "Add a child to a sprite at a specific index so you can find it later. This will make them move together.";  // untranslated
Blockly.Msg.ADD_CHILD_AT_VI = "add child";  // untranslated
Blockly.Msg.ADD_CHILD_AT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#addChildAt";  // untranslated
Blockly.Msg.ADD_CHILD_AT_VI_TOOLTIP = "Add a child to a sprite at a specific index so you can find it later. This will make them move together.";  // untranslated
Blockly.Msg.ADD_CHILD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#addChild";  // untranslated
Blockly.Msg.ADD_CHILD_TOOLTIP = "Add a child to a sprite. This will make them move together.";  // untranslated
Blockly.Msg.ADD_CHILD_VI = "add child object";  // untranslated
Blockly.Msg.ADD_CHILD_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#addChild";  // untranslated
Blockly.Msg.ADD_CHILD_VI_TOOLTIP = "Add a child to a sprite. This will make them move together.";  // untranslated
Blockly.Msg.ADD_COMMENT = "Dodaj komentar";
Blockly.Msg.ADD_COMMENT_BLOCK = "Add Comment Block";  // untranslated
Blockly.Msg.ADD_EVENT_LISTENER_DO = "do";  // untranslated
Blockly.Msg.ADD_EVENT_LISTENER_EVENT_TYPE = "for event of type";  // untranslated
Blockly.Msg.ADD_EVENT_LISTENER_HELP_URL = "";  // untranslated
Blockly.Msg.ADD_EVENT_LISTENER_ON = "on";  // untranslated
Blockly.Msg.ADD_EVENT_LISTENER_TITLE = "add event listener to dom element";  // untranslated
Blockly.Msg.ADD_EVENT_LISTENER_TOOLTIP = "";  // untranslated
Blockly.Msg.ADD_IMAGE = "add image to game at";  // untranslated
Blockly.Msg.ADD_IMAGE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.GameObjectFactory.html#sprite";  // untranslated
Blockly.Msg.ADD_IMAGE_TOOLTIP = "Creates a sprite with the image specified in the tag. The tag needs to be set up with the 'create image' or 'create sprite sheet' blocks.";  // untranslated
Blockly.Msg.ADD_KEY = "add key from keycode";  // untranslated
Blockly.Msg.ADD_KEY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Keyboard.html#addKey";  // untranslated
Blockly.Msg.ADD_KEY_TOOLTIP = "Create a new Phaser.Key that can be polled, have events attached to it, etc.";  // untranslated
Blockly.Msg.ADD_SOUND = "add sound";  // untranslated
Blockly.Msg.ADD_SOUND_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.GameObjectFactory.html#audio";  // untranslated
Blockly.Msg.ADD_SOUND_TOOLTIP = "Add a Sound to the game";  // untranslated
Blockly.Msg.ADD_TEXT = "add text at";  // untranslated
Blockly.Msg.ADD_TEXT_FONT_COLOUR = "font colour";  // untranslated
Blockly.Msg.ADD_TEXT_FONT_SIZE = "font size";  // untranslated
Blockly.Msg.ADD_TEXT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.GameObjectFactory.html#text";  // untranslated
Blockly.Msg.ADD_TEXT_INITIAL = "initial text";  // untranslated
Blockly.Msg.ADD_TEXT_TOOLTIP = "Add text to the screen at the specified location";  // untranslated
Blockly.Msg.ADD_TO_GROUP = "to group";  // untranslated
Blockly.Msg.ADD_TO_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#add";  // untranslated
Blockly.Msg.ADD_TO_GROUP_TOOLTIP = "Adds an existing object to a group.";  // untranslated
Blockly.Msg.ADD_TO_WORLD = "to the world";  // untranslated
Blockly.Msg.ADD_TO_WORLD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.World.html#add";  // untranslated
Blockly.Msg.ADD_TO_WORLD_TOOLTIP = "Adds an existing object to the world group. Necessary for making an object that has been previously removed from a  group visible again.";  // untranslated
Blockly.Msg.ADVANCED_IO_BIT_FIRST = "most significant bit first";  // untranslated
Blockly.Msg.ADVANCED_IO_BIT_ORDER = "bit order";  // untranslated
Blockly.Msg.ADVANCED_IO_CLOCK_PIN = "clock pin";  // untranslated
Blockly.Msg.ADVANCED_IO_DATA_PIN = "data pin";  // untranslated
Blockly.Msg.ADVANCED_IO_LEAST_SIGNIFICANT_BIT_FIRST = "least significant bit first";  // untranslated
Blockly.Msg.ADVANCED_IO_PULSE_IN = "pulse in";  // untranslated
Blockly.Msg.ADVANCED_IO_PULSE_IN_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/advanced-io/pulsein/";  // untranslated
Blockly.Msg.ADVANCED_IO_PULSE_IN_LONG = "pulse in long";  // untranslated
Blockly.Msg.ADVANCED_IO_PULSE_IN_LONG_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/advanced-io/pulseinlong/";  // untranslated
Blockly.Msg.ADVANCED_IO_PULSE_IN_LONG_TOOLTIP = "Reads a HIGH or LOW pulse from a pin returning the duration";  // untranslated
Blockly.Msg.ADVANCED_IO_PULSE_IN_TOOLTIP = "Reads a HIGH or LOW pulse from a pin returning the duration";  // untranslated
Blockly.Msg.ADVANCED_IO_SHIFT_IN = "shift in";  // untranslated
Blockly.Msg.ADVANCED_IO_SHIFT_IN_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/advanced-io/shiftin/";  // untranslated
Blockly.Msg.ADVANCED_IO_SHIFT_IN_TOOLTIP = "Shifts in a byte of data at a time, this is software based";  // untranslated
Blockly.Msg.ADVANCED_IO_SHIFT_OUT = "shift out";  // untranslated
Blockly.Msg.ADVANCED_IO_SHIFT_OUT_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/advanced-io/shiftout/";  // untranslated
Blockly.Msg.ADVANCED_IO_SHIFT_OUT_TOOLTIP = "Shifts out a byte of data at a time, this is software based";  // untranslated
Blockly.Msg.ALIGN = "align";  // untranslated
Blockly.Msg.ALIGN_IN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#alignIn";  // untranslated
Blockly.Msg.ALIGN_IN_OFFSET_X = "offset x pixels";  // untranslated
Blockly.Msg.ALIGN_IN_OFFSET_Y = "offset y pixels";  // untranslated
Blockly.Msg.ALIGN_IN_TOOLTIP = "Aligns this Game Object within another Game Object, or Rectangle, to one of 9 possible positions.";  // untranslated
Blockly.Msg.ALIGN_TO_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#alignTo";  // untranslated
Blockly.Msg.ALIGN_TO_OFFSET_X = "offset x pixels";  // untranslated
Blockly.Msg.ALIGN_TO_TOOLTIP = "Aligns this Game Object to the side of another Game Object, or Rectangle, in one of 12 possible positions.";  // untranslated
Blockly.Msg.ALIVE = "alive";  // untranslated
Blockly.Msg.ALLOW = "allow";  // untranslated
Blockly.Msg.ALLOWGRAVITY = "allowGravity";  // untranslated
Blockly.Msg.ALLOWROTATION = "allowRotation";  // untranslated
Blockly.Msg.AMBIENT_LEFT = "ambient sensor left";  // untranslated
Blockly.Msg.AMPLITUDE = "with amplitude";  // untranslated
Blockly.Msg.ANALOG_READ = "analog read pin #";  // untranslated
Blockly.Msg.ANALOG_READ_HELP_URL = "https://www.arduino.cc/en/Reference/AnalogRead";  // untranslated
Blockly.Msg.ANALOG_READ_TOOLTIP = "Read the value from the given analog pin";  // untranslated
Blockly.Msg.ANALOG_REFERENCE = "set analog reference to";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_HELP_URL = "https://www.arduino.cc/en/Reference/AnalogReference";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_TOOLTIP = "Set the reference voltage for analog input";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_TYPE_DROPDOWN_DEFAULT = "DEFAULT";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_TYPE_DROPDOWN_EXTERNAL = "EXTERNAL";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_TYPE_DROPDOWN_INTERAL2 = "INTERNAL1V1 (Mega Only)";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_TYPE_DROPDOWN_INTERAL3 = "INTERNAL2V56 (Mega Only)";  // untranslated
Blockly.Msg.ANALOG_REFERENCE_TYPE_DROPDOWN_INTERNAL1 = "INTERNAL (Not Available on Mega)";  // untranslated
Blockly.Msg.ANALOG_WRITE = "analog write ";  // untranslated
Blockly.Msg.ANALOG_WRITE_HELP_URL = "https://www.arduino.cc/en/Reference/AnalogWrite";  // untranslated
Blockly.Msg.ANALOG_WRITE_NUMBER = "to pin #";  // untranslated
Blockly.Msg.ANALOG_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.AND = "and";  // untranslated
Blockly.Msg.ANGULARACCELERATION = "angularAcceleration";  // untranslated
Blockly.Msg.ANGULARDRAG = "angularDrag";  // untranslated
Blockly.Msg.ANGULARVELOCITY = "angularVelocity";  // untranslated
Blockly.Msg.ANIMATION_DESTROY = "destroy all animations in animation manager of ";  // untranslated
Blockly.Msg.ANIMATION_DESTROY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#validateFrames";  // untranslated
Blockly.Msg.ANIMATION_DESTROY_TOOLTIP = "Destroy all animations on the object.";  // untranslated
Blockly.Msg.ANIMATION_DESTROY_VI = "destroy all animations in animation manager of ";  // untranslated
Blockly.Msg.ANIMATION_DESTROY_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#destroy";  // untranslated
Blockly.Msg.ANIMATION_DESTROY_VI_TOOLTIP = "Destroy all animations on the object.";  // untranslated
Blockly.Msg.ANIMATION_GET_ANIMATION = "on gameobject";  // untranslated
Blockly.Msg.ANIMATION_GET_ANIMATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#getAnimation";  // untranslated
Blockly.Msg.ANIMATION_GET_ANIMATION_NAME = "get animation by name";  // untranslated
Blockly.Msg.ANIMATION_GET_ANIMATION_TOOLTIP = "Returns an animation that was previously added by name.";  // untranslated
Blockly.Msg.ANIMATION_NEXT = "increment current animation by";  // untranslated
Blockly.Msg.ANIMATION_NEXT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#next";  // untranslated
Blockly.Msg.ANIMATION_NEXT_TOOLTIP = "Increment the current animation by a given amount of frames.";  // untranslated
Blockly.Msg.ANIMATION_NEXT_VI = "increment current animation by";  // untranslated
Blockly.Msg.ANIMATION_NEXT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#next";  // untranslated
Blockly.Msg.ANIMATION_NEXT_VI_TOOLTIP = "Increment the current animation by a given amount of frames.";  // untranslated
Blockly.Msg.ANIMATION_PREVIOUS = "decrement current animation by";  // untranslated
Blockly.Msg.ANIMATION_PREVIOUS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#previous";  // untranslated
Blockly.Msg.ANIMATION_PREVIOUS_TOOLTIP = "Decrement the current animation by a given amount of frames.";  // untranslated
Blockly.Msg.ANIMATION_PREVIOUS_VI = "decrement current animation by";  // untranslated
Blockly.Msg.ANIMATION_PREVIOUS_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#previous";  // untranslated
Blockly.Msg.ANIMATION_PREVIOUS_VI_TOOLTIP = "Decrement the current animation by a given amount of frames.";  // untranslated
Blockly.Msg.ANIMATION_UPDATE = "frame update of ";  // untranslated
Blockly.Msg.ANIMATION_UPDATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#update";  // untranslated
Blockly.Msg.ANIMATION_UPDATE_TOOLTIP = "Internal method do not call";  // untranslated
Blockly.Msg.ARDUINO_MATH_MAP = "map";  // untranslated
Blockly.Msg.ARDUINO_MATH_MAP_FROM_HIGH = "from high";  // untranslated
Blockly.Msg.ARDUINO_MATH_MAP_FROM_LOW = "from low";  // untranslated
Blockly.Msg.ARDUINO_MATH_MAP_TO_HIGH = "to high";  // untranslated
Blockly.Msg.ARDUINO_MATH_MAP_TO_LOW = "to low";  // untranslated
Blockly.Msg.ARDUINO_MATH_MAP_VALUE = "value";  // untranslated
Blockly.Msg.ARDUINO_RANDOM = "generate random number between";  // untranslated
Blockly.Msg.ARDUINO_RANDOM_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/random-numbers/random/";  // untranslated
Blockly.Msg.ARDUINO_RANDOM_SEED = "generate random seed from";  // untranslated
Blockly.Msg.ARDUINO_RANDOM_SEED_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/random-numbers/random/";  // untranslated
Blockly.Msg.ARDUINO_RANDOM_SEED_TOOLTIP = "Shuffles the random function.";  // untranslated
Blockly.Msg.ARDUINO_RANDOM_TOOLTIP = "The random function generates pseudo-random numbers.";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_AVAILABLE = "serial available";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_AVAILABLE_FOR_WRITE = "serial available for write";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_AVAILABLE_FOR_WRITE_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/availableforwrite/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_AVAILABLE_FOR_WRITE_TOOLTIP = "Gets the number of bytes available to write";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_AVAILABLE_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/available/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_AVAILABLE_TOOLTIP = "Gets the number of bytes available to be read";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FIND = "serial find";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FIND_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/find/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FIND_TOOLTIP = "Returns true if the target string is found in the serial stream else false";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FIND_UNTIL = "serial find";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FIND_UNTIL_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/finduntil/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FIND_UNTIL_TOOLTIP = "Returns true if the target string is found in the serial stream else false if timeout or terminal is found";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FLUSH = "serial flush";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FLUSH_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/flush/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_FLUSH_TOOLTIP = "wait fo outgoing serial data to complete";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PARSE_FLOAT = "serial parse float";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PARSE_FLOAT_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/parsefloat/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PARSE_FLOAT_TOOLTIP = "read the first valid float form the serial stream";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PARSE_INT = "serial parse integer";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PARSE_INT_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/parseint/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PARSE_INT_TOOLTIP = "read the first valid integer form the serial stream";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PEEK = "serial peek next byte";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PEEK_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/peek/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_PEEK_TOOLTIP = "gets the next byte without removing it from the stream";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES = "serial read bytes into";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/readbytesuntil/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_TOOLTIP = "gets the next byte without removing it from the stream";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_UNTIL = "serial read bytes into";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_UNTIL_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/readbytesuntil/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_UNTIL_TERMINAL = "or until";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_UNTIL_TOOLTIP = "gets the next byte without removing it from the stream";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_READ_BYTES_UP_TO = "up to length";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_SET_TIMEOUT = "serial set timeout to";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_SET_TIMEOUT_HELP_URL = "https://www.arduino.cc/reference/en/language/functions/communication/serial/settimeout/";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_SET_TIMEOUT_TOOLTIP = "sets the max milliseconds to wait for serial data, defaults to 1000 milliseconds";  // untranslated
Blockly.Msg.ARDUINO_SERIAL_UNTIL = "until";  // untranslated
Blockly.Msg.ARDUINO_SRAND = "srand";  // untranslated
Blockly.Msg.ARDUINO_SRAND_HELP_URL = "http://www.cplusplus.com/reference/cstdlib/srand/";  // untranslated
Blockly.Msg.ARDUINO_SRAND_TOOLTIP = "";  // untranslated
Blockly.Msg.AT = "at";  // untranslated
Blockly.Msg.AT_INDEX = "at index";  // untranslated
Blockly.Msg.AT_POSITION = "at position";  // untranslated
Blockly.Msg.AT_THE = "at the";  // untranslated
Blockly.Msg.AT_VOLUME = "at volume";  // untranslated
Blockly.Msg.AUTO_DESTROY = "auto destroy";  // untranslated
Blockly.Msg.A_CHILD_OF = "a child of";  // untranslated
Blockly.Msg.BEEPMS = "beep";  // untranslated
Blockly.Msg.BEEPMS_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.BEEPMS_TOOLTIP = "beeps for a specified duration";  // untranslated
Blockly.Msg.BEEPOFF = "turn beep off";  // untranslated
Blockly.Msg.BEEPOFF_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.BEEPOFF_TOOLTIP = "Turns off the beep. Phew.";  // untranslated
Blockly.Msg.BEEPON = "turn beep on";  // untranslated
Blockly.Msg.BEEPON_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.BEEPON_TOOLTIP = "Turns on the beep until it's told to stop;";  // untranslated
Blockly.Msg.BEGIN_NAVIGATION = "begin navigation";  // untranslated
Blockly.Msg.BEGIN_NAVIGATION_TOOLTIP = "";  // untranslated
Blockly.Msg.BESTILL = "be still";  // untranslated
Blockly.Msg.BESTILL_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.BESTILL_TOOLTIP = "Stops the wink robot from moving";  // untranslated
Blockly.Msg.BIT = "Value of bit";  // untranslated
Blockly.Msg.BIT_CLEAR = "Clear bit";  // untranslated
Blockly.Msg.BIT_CLEAR_HELP_URL = "https://www.arduino.cc/en/Reference/BitClear";  // untranslated
Blockly.Msg.BIT_CLEAR_NUMBER = "from Number";  // untranslated
Blockly.Msg.BIT_CLEAR_TOOLTIP = "";  // untranslated
Blockly.Msg.BIT_HELP_URL = "https://www.arduino.cc/en/Reference/Bit";  // untranslated
Blockly.Msg.BIT_READ = "Read Number";  // untranslated
Blockly.Msg.BIT_READ_HELP_URL = "https://www.arduino.cc/en/Reference/BitRead";  // untranslated
Blockly.Msg.BIT_READ_POSITION = "at Position";  // untranslated
Blockly.Msg.BIT_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.BIT_SET = "Set bit";  // untranslated
Blockly.Msg.BIT_SET_HELP_URL = "https://www.arduino.cc/en/Reference/BitSet";  // untranslated
Blockly.Msg.BIT_SET_NUMBER = "in Number";  // untranslated
Blockly.Msg.BIT_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.BIT_TOOLTIP = "";  // untranslated
Blockly.Msg.BIT_WRITE = "Set Number";  // untranslated
Blockly.Msg.BIT_WRITE_HELP_URL = "https://www.arduino.cc/en/Reference/BitWrite";  // untranslated
Blockly.Msg.BIT_WRITE_POSITION = "at Position";  // untranslated
Blockly.Msg.BIT_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.BIT_WRITE_VALUE = "with Value";  // untranslated
Blockly.Msg.BLUE = "blue";  // untranslated
Blockly.Msg.BODY_BOTTOM = "body bottom";  // untranslated
Blockly.Msg.BODY_TOP = "body top";  // untranslated
Blockly.Msg.BOTTOM_CENTER = "bottom center";  // untranslated
Blockly.Msg.BOTTOM_LEFT = "bottom left";  // untranslated
Blockly.Msg.BOTTOM_RIGHT = "bottom right";  // untranslated
Blockly.Msg.BOUNCE = "bounce";  // untranslated
Blockly.Msg.BRING_TO_TOP = "bring";  // untranslated
Blockly.Msg.BRING_TO_TOP_FRONT = "to the front";  // untranslated
Blockly.Msg.BRING_TO_TOP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#bringToTop";  // untranslated
Blockly.Msg.BRING_TO_TOP_TOOLTIP = "Brings this sprite/image to the front of the display order. In case of overlapping sprites, this one will draw on top of everything else.";  // untranslated
Blockly.Msg.BUTTONWAIT = "wait for button press";  // untranslated
Blockly.Msg.BUTTONWAIT_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.BUTTONWAIT_TOOLTIP = "Waits until a remote button is pressed to continue.";  // untranslated
Blockly.Msg.BUTTON_PRESSED = "button pressed";  // untranslated
Blockly.Msg.BUTTON_PRESSED_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.BUTTON_PRESSED_TOOLTIP = "";  // untranslated
Blockly.Msg.BY = "by";  // untranslated
Blockly.Msg.CALIBRATE_NAVIGATION_SENSORS = "calibrate navigation sensors";  // untranslated
Blockly.Msg.CALIBRATE_NAVIGATION_SENSORS_TOOLTIP = "";  // untranslated
Blockly.Msg.CALL = "call";  // untranslated
Blockly.Msg.CALLING = "calling";  // untranslated
Blockly.Msg.CALL_FUNCTION_ON_GROUP = "Call function";  // untranslated
Blockly.Msg.CALL_FUNCTION_ON_GROUP_CHILDREN = "on all children in group";  // untranslated
Blockly.Msg.CALL_FUNCTION_ON_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#forEachAlive";  // untranslated
Blockly.Msg.CALL_FUNCTION_ON_GROUP_TOOLTIP = "Calls the specified function once for each group member, giving that child as the input.";  // untranslated
Blockly.Msg.CAMERA_FADE = "fade screen to";  // untranslated
Blockly.Msg.CAMERA_FADE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#fade";  // untranslated
Blockly.Msg.CAMERA_FADE_TOOLTIP = "Fades the screen to the specified colour over time. Ends with the screen completely obscured.";  // untranslated
Blockly.Msg.CAMERA_FLASH = "flash screen to";  // untranslated
Blockly.Msg.CAMERA_FLASH_FADE = "then fade in over";  // untranslated
Blockly.Msg.CAMERA_FLASH_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#flash";  // untranslated
Blockly.Msg.CAMERA_FLASH_TOOLTIP = "Immediately covers the camera with the specified colour. Then fades back in over a given time. Useful for fading back in after fading out, or as a big hit effect.";  // untranslated
Blockly.Msg.CAMERA_FOCUS_ON = "focus camera on";  // untranslated
Blockly.Msg.CAMERA_FOCUS_ON_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#focusOn";  // untranslated
Blockly.Msg.CAMERA_FOCUS_ON_TOOLTIP = "Immediately centers the camera on the specified game object.";  // untranslated
Blockly.Msg.CAMERA_FOCUS_ON_XY = "focus camera on position at";  // untranslated
Blockly.Msg.CAMERA_FOCUS_ON_XY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#focusOnXY";  // untranslated
Blockly.Msg.CAMERA_FOCUS_ON_XY_TOOLTIP = "Immediately centers the camera on a given position.";  // untranslated
Blockly.Msg.CAMERA_FOLLOW = "make camera follow";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#follow";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_TOOLTIP = "Make the camera follow the specified game object";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI = "make camera follow";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#follow";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI_STYLED = "make camera follow";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI_STYLED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#follow";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI_STYLED_SELECTION = "with style";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI_STYLED_TOOLTIP = "Make the camera follow the specified game object";  // untranslated
Blockly.Msg.CAMERA_FOLLOW_VI_TOOLTIP = "Make the camera follow the specified game object";  // untranslated
Blockly.Msg.CAMERA_RESET = "reset camera";  // untranslated
Blockly.Msg.CAMERA_RESET_FX = "reset camera effects";  // untranslated
Blockly.Msg.CAMERA_RESET_FX_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#resetFX";  // untranslated
Blockly.Msg.CAMERA_RESET_FX_TOOLTIP = "Removes visual effects from the camera such as fading in/out. Does not affect the position, follow target, or screen shake.";  // untranslated
Blockly.Msg.CAMERA_RESET_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#reset";  // untranslated
Blockly.Msg.CAMERA_RESET_TOOLTIP = "Completely resets the camera. It goes back to (0, 0), stops following anything, and removes all effects such as shake or flash.";  // untranslated
Blockly.Msg.CAMERA_SET_BOUNDS_TO_WORLD = "set camera bounds to world bounds";  // untranslated
Blockly.Msg.CAMERA_SET_BOUNDS_TO_WORLD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#setBoundsToWorld";  // untranslated
Blockly.Msg.CAMERA_SET_BOUNDS_TO_WORLD_TOOLTIP = "The camera bounds are not the size of what it shows, but the space it can move around in. This sets those bounds so that the camera can view the entire world, but nothing more.";  // untranslated
Blockly.Msg.CAMERA_SET_POSITION = "set camera position to";  // untranslated
Blockly.Msg.CAMERA_SET_POSITION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#setPosition";  // untranslated
Blockly.Msg.CAMERA_SET_POSITION_TOOLTIP = "Jumps the camera immediately to the given position. Note that the camera's position is its upper left corner, not its center.";  // untranslated
Blockly.Msg.CAMERA_SET_SIZE = "set camera size";  // untranslated
Blockly.Msg.CAMERA_SET_SIZE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#setSize";  // untranslated
Blockly.Msg.CAMERA_SET_SIZE_TOOLTIP = "Sets the size of the camera's view window.";  // untranslated
Blockly.Msg.CAMERA_SHAKE = "shake the camera";  // untranslated
Blockly.Msg.CAMERA_SHAKE_DIRECTION_DROPDOWN_BOTH = "horizontal and vertical";  // untranslated
Blockly.Msg.CAMERA_SHAKE_DIRECTION_DROPDOWN_HORIZONTAL = "horizontally";  // untranslated
Blockly.Msg.CAMERA_SHAKE_DIRECTION_DROPDOWN_VERTICAL = "vertically";  // untranslated
Blockly.Msg.CAMERA_SHAKE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#shake";  // untranslated
Blockly.Msg.CAMERA_SHAKE_INTENSITY = "% intensity";  // untranslated
Blockly.Msg.CAMERA_SHAKE_TOOLTIP = "Screen shake. Great for impact effects, or just a little extra umph, but don't go overboard. The intensity goes from 0 to 1. % of bounds it can move";  // untranslated
Blockly.Msg.CAMERA_UNFOLLOW = "stop camera follow";  // untranslated
Blockly.Msg.CAMERA_UNFOLLOW_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html#unfollow";  // untranslated
Blockly.Msg.CAMERA_UNFOLLOW_TOOLTIP = "Makes the camera stop following anything. Equivalent to making the camera follow null.";  // untranslated
Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE = "Can't delete the variable '%1' because it is part of the definition of the procedure '%2'";  // untranslated
Blockly.Msg.CAST_BLOCK_HELP_URL = "https://en.wikipedia.org/wiki/Type_conversion";  // untranslated
Blockly.Msg.CAST_BLOCK_TOOLTIP = "";  // untranslated
Blockly.Msg.CENTER = "center";  // untranslated
Blockly.Msg.CENTER_AND_STRETCH = "center and stretch phaser";  // untranslated
Blockly.Msg.CENTER_AND_STRETCH_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ScaleManager.html#scaleMode";  // untranslated
Blockly.Msg.CENTER_AND_STRETCH_TOOLTIP = "Tells Phaser to center and stretch the game view to fit its window.";  // untranslated
Blockly.Msg.CENTER_LEFT = "center left";  // untranslated
Blockly.Msg.CENTER_RIGHT = "center right";  // untranslated
Blockly.Msg.CHANGE_VALUE_TITLE = "Spremeni vrednost:";
Blockly.Msg.CHECK_COLLISION = "allow world collisions in direction";  // untranslated
Blockly.Msg.CHECK_COLLISION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#checkCollision";  // untranslated
Blockly.Msg.CHECK_COLLISION_TOOLTIP = "Which edges of the World bounds Bodies can collide against when collideWorldBounds is true. For example checkCollision.down = false means Bodies cannot collide with the World.bounds.bottom.";  // untranslated
Blockly.Msg.CHECK_OVERLAP = "Check Overlap Between";  // untranslated
Blockly.Msg.CHECK_OVERLAP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#overlap";  // untranslated
Blockly.Msg.CHECK_OVERLAP_IF = "if overlapping";  // untranslated
Blockly.Msg.CHECK_OVERLAP_TOOLTIP = "Checks for an overlap between objectA and objectB.";  // untranslated
Blockly.Msg.CHECK_OVERLAP_VI = "check overlap between";  // untranslated
Blockly.Msg.CHECK_OVERLAP_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#overlap";  // untranslated
Blockly.Msg.CHECK_OVERLAP_VI_IF = "if overlapping";  // untranslated
Blockly.Msg.CHECK_OVERLAP_VI_TOOLTIP = "Checks for an overlap between objectA and objectB.";  // untranslated
Blockly.Msg.CHECK_WORLD_BOUNDS = "check to see if it's inside the world?";  // untranslated
Blockly.Msg.CHECK_WORLD_BOUNDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#checkWorldBounds";  // untranslated
Blockly.Msg.CHECK_WORLD_BOUNDS_TOOLTIP = "This object will start checking if it's inside the world every frame. This takes time, so it's disabled by default.";  // untranslated
Blockly.Msg.CIRCLE_CIRCUMFERENCE = "circumference of";  // untranslated
Blockly.Msg.CIRCLE_CIRCUMFERENCE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#circumference";  // untranslated
Blockly.Msg.CIRCLE_CIRCUMFERENCE_POINT = "point from";  // untranslated
Blockly.Msg.CIRCLE_CIRCUMFERENCE_POINT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#circumferencePoint";  // untranslated
Blockly.Msg.CIRCLE_CIRCUMFERENCE_POINT_TOOLTIP = "Returns a Point object containing the coordinates of a point on the circumference of the Circle based on the given angle.";  // untranslated
Blockly.Msg.CIRCLE_CIRCUMFERENCE_TOOLTIP = "The circumference of the circle.";  // untranslated
Blockly.Msg.CIRCLE_CLONE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#clone";  // untranslated
Blockly.Msg.CIRCLE_CLONE_TOOLTIP = "Returns a new Circle object with the same values for the x, y, width, and height properties as this Circle object.";  // untranslated
Blockly.Msg.CIRCLE_CONTAINS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#contains";  // untranslated
Blockly.Msg.CIRCLE_CONTAINS_TOOLTIP = "Return true if the given x/y coordinates are within this Circle object.";  // untranslated
Blockly.Msg.CIRCLE_CREATE = "make circle";  // untranslated
Blockly.Msg.CIRCLE_CREATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#Circle";  // untranslated
Blockly.Msg.CIRCLE_CREATE_TOOLTIP = "Creates a new Circle object with the center coordinate specified by the x and y parameters and the diameter specified by the diameter parameter.";  // untranslated
Blockly.Msg.CIRCLE_GET_NUMERIC_FIELDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#toc-3";  // untranslated
Blockly.Msg.CIRCLE_GET_NUMERIC_FIELDS_TOOLTIP = "Get numeric fields of a Circle object.";  // untranslated
Blockly.Msg.CIRCLE_INTERSECTS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#_intersects";  // untranslated
Blockly.Msg.CIRCLE_INTERSECTS_RECTANGLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#_intersectsRectangle";  // untranslated
Blockly.Msg.CIRCLE_INTERSECTS_RECTANGLE_TOOLTIP = "Checks if the given Circle and Rectangle objects intersect.";  // untranslated
Blockly.Msg.CIRCLE_INTERSECTS_TOOLTIP = "Determines whether the two Circle objects intersect based on the radius distances.";  // untranslated
Blockly.Msg.CIRCLE_RANDOM = "random point in";  // untranslated
Blockly.Msg.CIRCLE_RANDOM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Circle.html#random";  // untranslated
Blockly.Msg.CIRCLE_RANDOM_TOOLTIP = "Returns a uniformly distributed random point from anywhere within this Circle.";  // untranslated
Blockly.Msg.CIRCLE_SET_NUMERIC_FIELDS_TOOLTIP = "Set numeric fields of a Circle object.";  // untranslated
Blockly.Msg.CLASSES_SUPER_CONSTRUCTOR_TITLE = "call super constructor";  // untranslated
Blockly.Msg.CLASS_CONTEXT_CREATE_MEMBER_GETTER = "create in %1 instance get %2";  // untranslated
Blockly.Msg.CLASS_CONTEXT_CREATE_MEMBER_SETTER = "create in %1 instance set %2";  // untranslated
Blockly.Msg.CLASS_CONTEXT_CREATE_THIS = "create 'this'";  // untranslated
Blockly.Msg.CLASS_DEFINITION_CLASS = "class";  // untranslated
Blockly.Msg.CLASS_DEFINITION_CONSTRUCT = "construct with ";  // untranslated
Blockly.Msg.CLASS_DEFINITION_CONSTRUCT_PARAM = "construct %1";  // untranslated
Blockly.Msg.CLASS_DEFINITION_DEFAULT_NAME = "name";  // untranslated
Blockly.Msg.CLASS_DEFINITION_DUPLICATE_WARNING = "Warning: The class constructor has duplicate parameters.";  // untranslated
Blockly.Msg.CLASS_DEFINITION_EXTENDS = "extends";  // untranslated
Blockly.Msg.CLASS_DEFINITION_HELP_URL = "";  // untranslated
Blockly.Msg.CLASS_DEFINITION_METHODS = "methods";  // untranslated
Blockly.Msg.CLASS_DEFINITION_TOOLTIP = "Create %1 with: %2";  // untranslated
Blockly.Msg.CLASS_TYPE_HELP_URL = "";  // untranslated
Blockly.Msg.CLASS_TYPE_TOOLTIP = "";  // untranslated
Blockly.Msg.CLEAN_UP = "Ponastavi kocke";
Blockly.Msg.CLEAR_CROPPING = "stop cropping";  // untranslated
Blockly.Msg.CLEAR_CROPPING_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#crop";  // untranslated
Blockly.Msg.CLEAR_CROPPING_TOOLTIP = "Removes any cropping from a sprite.";  // untranslated
Blockly.Msg.CLEAR_SCALE_MIN_MAX = "clear scale constraints on";  // untranslated
Blockly.Msg.CLEAR_SCALE_MIN_MAX_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#setScaleMinMax";  // untranslated
Blockly.Msg.CLEAR_SCALE_MIN_MAX_TOOLTIP = "If scaling constraints were set on a sprite, this removes them.";  // untranslated
Blockly.Msg.CLONE = "clone";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Skrči kocke";
Blockly.Msg.COLLAPSE_BLOCK = "Skrči kocko";
Blockly.Msg.COLLIDE = "collide";  // untranslated
Blockly.Msg.COLLIDE_BOOLEAN = "is colliding with";  // untranslated
Blockly.Msg.COLLIDE_BOOLEAN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#collide";  // untranslated
Blockly.Msg.COLLIDE_BOOLEAN_TOOLTIP = "Checks for collision between two objects, and separates them if they are colliding. Returns true or false based on if they are colliding.";  // untranslated
Blockly.Msg.COLLIDE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#collide";  // untranslated
Blockly.Msg.COLLIDE_TOOLTIP = "Collide the first group/object with the second group/object";  // untranslated
Blockly.Msg.COLLIDE_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#collide";  // untranslated
Blockly.Msg.COLLIDE_VI_TOOLTIP = "Collide the first group/object with the second group/object";  // untranslated
Blockly.Msg.COLLIDE_WITH_ARROW_FUNCTION = "if collided do";  // untranslated
Blockly.Msg.COLLIDE_WITH_ARROW_FUNCTION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#collide";  // untranslated
Blockly.Msg.COLLIDE_WITH_ARROW_FUNCTION_TOOLTIP = "Collide two objects, if they are collide do the statements in the block";  // untranslated
Blockly.Msg.COLLIDE_WITH_WORLD_BOUNDS = "with world bounds";  // untranslated
Blockly.Msg.COLLIDE_WITH_WORLD_BOUNDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Ninja.Body.html#collideWorldBounds";  // untranslated
Blockly.Msg.COLLIDE_WITH_WORLD_BOUNDS_TOOLTIP = "Make this object collide with the world bounds.";  // untranslated
Blockly.Msg.COLLIDE_WITH_WORLD_BOUNDS_VI = "collide with world bounds";  // untranslated
Blockly.Msg.COLLIDE_WITH_WORLD_BOUNDS_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Ninja.Body.html#collideWorldBounds";  // untranslated
Blockly.Msg.COLLIDE_WITH_WORLD_BOUNDS_VI_TOOLTIP = "Make this object collide with the world bounds.";  // untranslated
Blockly.Msg.COLLISION_GET_OBJECTS_AT_LOCATION_FUNCTION = "check overlap between objects from group";  // untranslated
Blockly.Msg.COLLISION_GET_OBJECTS_AT_LOCATION_FUNCTION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#getObjectsAtLocation";  // untranslated
Blockly.Msg.COLLISION_GET_OBJECTS_AT_LOCATION_FUNCTION_TOOLTIP = "Given a Group and a location this will check to see which Group children overlap with the coordinates.";  // untranslated
Blockly.Msg.COLOUR = "colour";  // untranslated
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "barva 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "barva 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "razmerje";
Blockly.Msg.COLOUR_BLEND_TITLE = "mešanica";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Zmeša dve barvi v danem razmerju (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Izberi barvo s palete.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "naključna barva";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Izbere naključno barvo.";
Blockly.Msg.COLOUR_RGB_BLUE = "modra";
Blockly.Msg.COLOUR_RGB_GREEN = "zelena";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "rdeča";
Blockly.Msg.COLOUR_RGB_TITLE = "določena barva";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Ustvari barvo z določeno količino rdeče, zelene in modre. Vse vrednosti morajo biti med 0 in 100.";
Blockly.Msg.CONSOLE_LOG_HELP_URL = "";  // untranslated
Blockly.Msg.CONSOLE_LOG_TITLE = "console log";  // untranslated
Blockly.Msg.CONSOLE_LOG_TOOLTIP = "";  // untranslated
Blockly.Msg.CONTAINS = "contains";  // untranslated
Blockly.Msg.CONTAINS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#contains";  // untranslated
Blockly.Msg.CONTAINS_TOOLTIP = "Checks to see if one sprite is the child of another.";  // untranslated
Blockly.Msg.CONTAINS_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#contains";  // untranslated
Blockly.Msg.CONTAINS_VI_TOOLTIP = "Checks to see if one sprite is the child of another.";  // untranslated
Blockly.Msg.CONTROLS_DOWHILE_HELPURL = "https://en.wikipedia.org/wiki/Do_while_loop";  // untranslated
Blockly.Msg.CONTROLS_DOWHILE_OPERATOR_UNTIL = "repeat until";  // untranslated
Blockly.Msg.CONTROLS_DOWHILE_OPERATOR_WHILE = "repeat while";  // untranslated
Blockly.Msg.CONTROLS_DOWHILE_TOOLTIP_UNTIL = "Do some statements while a value is false. Always does the statements at least once.";  // untranslated
Blockly.Msg.CONTROLS_DOWHILE_TOOLTIP_WHILE = "Do some statements while a value is true. Always does the statements at least once.";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "izstopi iz zanke";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "nadaljuj z naslednjo ponovitvijo zanke";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Izstopi iz trenutne zanke.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Preskoči preostanek te zanke in nadaljuje z naslednjo ponovitvijo.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Pozor: To kocko lahko uporabiš samo znotraj zanke.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "za vsak element %1 v seznamu %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Za vsak element v seznamu, nastavi spremenljivko '%1' na ta element. Pri tem se izvedejo določene kocke.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "štej s/z %1 od %2 do %3 s korakom %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Vrednost spremenljivke '%1' se spreminja od začetnega števila do končnega števila, z določenim korakom. Pri tem se izvedejo določene kocke.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Dodaj pogoj »če« kocki.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Dodaj končni pogoj »če« kocki.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Dodaj, odstrani ali spremeni vrstni red odsekov za ponovno nastavitev »če« kocke.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "sicer";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "sicer če";
Blockly.Msg.CONTROLS_IF_MSG_IF = "če";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Če je vrednost resnična, izvedi določene kocke.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Če je vrednost resnična, izvedi prvo skupino kock. Sicer izvedi drugo skupino kock.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Če je prva vrednost resnična, izvedi prvo skupino kock. Sicer, če je resnična druga vrednost, izvedi drugo skupino kock.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Če je prva vrednost resnična, izvedi prvo skupino kock. Sicer, če je resnična druga vrednost, izvedi drugo skupino kock. Če nobena izmed vrednosti ni resnična, izvedi zadnjo skupino kock.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "izvedi";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "ponavljaj %1 krat";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Kocke se izvedejo večkrat.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "ponavljaj dokler";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "ponavljaj";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Kocke se izvajajo dokler je vrednost neresnična.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Kocke se izvajajo dokler je vrednost resnična.";
Blockly.Msg.CREATE_BITMAPFONT = "Create Font";  // untranslated
Blockly.Msg.CREATE_BITMAPFONT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Loader.html#bitmapFont";  // untranslated
Blockly.Msg.CREATE_BITMAPFONT_TOOLTIP = "Loads a font into the game. These don't work like normal fonts. See the help for more info.";  // untranslated
Blockly.Msg.CREATE_BITMAPFONT_XML = "XML";  // untranslated
Blockly.Msg.CREATE_CURSOR_KEYS = "Create Cursor Keys";  // untranslated
Blockly.Msg.CREATE_CURSOR_KEYS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Keyboard.html#createCursorKeys";  // untranslated
Blockly.Msg.CREATE_CURSOR_KEYS_TOOLTIP = "Create a cursor allowing access to the UP/DOWN/LEFT/RIGHT keys";  // untranslated
Blockly.Msg.CREATE_GRAPHICS_OBJECT = "create graphics object with offsets";  // untranslated
Blockly.Msg.CREATE_GRAPHICS_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Graphics.html";  // untranslated
Blockly.Msg.CREATE_GRAPHICS_OBJECT_TOOLTIP = "Returns an object that can draw shapes in the world.";  // untranslated
Blockly.Msg.CREATE_GROUP = "create group";  // untranslated
Blockly.Msg.CREATE_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.GameObjectFactory.html#group";  // untranslated
Blockly.Msg.CREATE_GROUP_TOOLTIP = "Create a new group of display objects";  // untranslated
Blockly.Msg.CREATE_IMAGE = "create image";  // untranslated
Blockly.Msg.CREATE_IMAGE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Loader.html#image";  // untranslated
Blockly.Msg.CREATE_IMAGE_TOOLTIP = "Loads an image into the game so it can be used.";  // untranslated
Blockly.Msg.CREATE_INSTANCE_OF_CLASS_DEFAULT = "create instance of";  // untranslated
Blockly.Msg.CREATE_INSTANCE_OF_CLASS_HELP_URL = "";  // untranslated
Blockly.Msg.CREATE_INSTANCE_OF_CLASS_TITLE = "create %1 instance";  // untranslated
Blockly.Msg.CREATE_INSTANCE_OF_CLASS_TOOLTIP = "Create an instance of a class.";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP = "create object at";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#create";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_TOOLTIP = "Create a new sprite in the group";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#create";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_VI_TOOLTIP = "Create a new sprite in the group";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME = "create object at";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#create";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME_NUMBER = "displaying frame #";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME_TOOLTIP = "Creates a sprite in the new group using the specified frame from a sprite sheet or texture atlas";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME_VI = "displaying frame";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#create";  // untranslated
Blockly.Msg.CREATE_OBJECT_IN_GROUP_WITH_FRAME_VI_TOOLTIP = "Creates a sprite in the new group using the specified frame from a sprite sheet or texture atlas";  // untranslated
Blockly.Msg.CREATE_POINT = "Create Point";  // untranslated
Blockly.Msg.CREATE_POINT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html";  // untranslated
Blockly.Msg.CREATE_POINT_TOOLTIP = "Makes a point type. This is a combination of an x and y value which is used to represent either a position, or a combination of width and height.";  // untranslated
Blockly.Msg.CREATE_SPRITE_SHEET = "create sprite sheet";  // untranslated
Blockly.Msg.CREATE_SPRITE_SHEET_FRAME_HEIGHT = "frame height";  // untranslated
Blockly.Msg.CREATE_SPRITE_SHEET_FRAME_WIDTH = "frame width";  // untranslated
Blockly.Msg.CREATE_SPRITE_SHEET_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Loader.html#spritesheet";  // untranslated
Blockly.Msg.CREATE_SPRITE_SHEET_TOOLTIP = "Loads a sprite sheet, which is a collection of animation frames in a single image. See the help for more info.";  // untranslated
Blockly.Msg.CREATE_TIMER_TITLE = "create new timer";  // untranslated
Blockly.Msg.CREATE_TIMER_TOOLTIP = "Create a new timer, if auto destroy is true this timer will be destoryed after all events are dispatched";  // untranslated
Blockly.Msg.CREATE_TIMER_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#Timer";  // untranslated
Blockly.Msg.CROP = "crop";  // untranslated
Blockly.Msg.CROP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#crop";  // untranslated
Blockly.Msg.CROP_TOOLTIP = "crop a sprite to an area defined by a rectangle or other object";  // untranslated
Blockly.Msg.DEAD = "dead";  // untranslated
Blockly.Msg.DEBUG_BODY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Utils.Debug.html#body";  // untranslated
Blockly.Msg.DEBUG_BODY_INFO = "render body info for";  // untranslated
Blockly.Msg.DEBUG_BODY_INFO_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#bodyInfo";  // untranslated
Blockly.Msg.DEBUG_BODY_INFO_TOOLTIP = "Render a Sprites Physic Body information.";  // untranslated
Blockly.Msg.DEBUG_BODY_TEXT = "debug body";  // untranslated
Blockly.Msg.DEBUG_BODY_TOOLTIP = "Enable debug information for the game object";  // untranslated
Blockly.Msg.DEBUG_CAMERA = "debug camera";  // untranslated
Blockly.Msg.DEBUG_CAMERA_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#camera";  // untranslated
Blockly.Msg.DEBUG_CAMERA_INFO = "render camera info at";  // untranslated
Blockly.Msg.DEBUG_CAMERA_INFO_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#cameraInfo";  // untranslated
Blockly.Msg.DEBUG_CAMERA_INFO_TOOLTIP = "Render camera information including dimensions and location.";  // untranslated
Blockly.Msg.DEBUG_CAMERA_TOOLTIP = "Marks the follow target and deadzone.";  // untranslated
Blockly.Msg.DEBUG_GEOM = "draw shape";  // untranslated
Blockly.Msg.DEBUG_GEOM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Utils.Debug.html#geom";  // untranslated
Blockly.Msg.DEBUG_GEOM_TOOLTIP = "Renders a Phaser geometry object including Rectangle, Circle, Point or Line.";  // untranslated
Blockly.Msg.DEBUG_INPUT_INFO = "render mouse info at";  // untranslated
Blockly.Msg.DEBUG_INPUT_INFO_HELP_URL = "";  // untranslated
Blockly.Msg.DEBUG_INPUT_INFO_TOOLTIP = "";  // untranslated
Blockly.Msg.DEBUG_KEY = "render key info for";  // untranslated
Blockly.Msg.DEBUG_KEY_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#key";  // untranslated
Blockly.Msg.DEBUG_KEY_TOOLTIP = "Renders Phaser.Key object information.";  // untranslated
Blockly.Msg.DEBUG_PHSYICS_GROUP = "render body info of group";  // untranslated
Blockly.Msg.DEBUG_PHYSICS_GROUP_CHECK = "only for alive members";  // untranslated
Blockly.Msg.DEBUG_PHYSICS_GROUP_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#physicsGroup";  // untranslated
Blockly.Msg.DEBUG_PHYSICS_GROUP_TOOLTIP = "Render each physics body in a group.";  // untranslated
Blockly.Msg.DEBUG_RECTANGLE = "render rectangle";  // untranslated
Blockly.Msg.DEBUG_RECTANGLE_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#rectangle";  // untranslated
Blockly.Msg.DEBUG_RECTANGLE_TOOLTIP = "Renders a Rectangle.";  // untranslated
Blockly.Msg.DEBUG_SOUND = "render debug info for sound manager at position";  // untranslated
Blockly.Msg.DEBUG_SOUND_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#sound";  // untranslated
Blockly.Msg.DEBUG_SOUND_INFO = "render debug info for sound";  // untranslated
Blockly.Msg.DEBUG_SOUND_INFO_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#sound";  // untranslated
Blockly.Msg.DEBUG_SOUND_INFO_TOOLTIP = "Render Sound Manager information, including volume, mute, audio mode, and locked status.";  // untranslated
Blockly.Msg.DEBUG_SOUND_TOOLTIP = "Render Sound Manager information, including volume, mute, audio mode, and locked status.";  // untranslated
Blockly.Msg.DEBUG_SPRITE = "write debug for sprite";  // untranslated
Blockly.Msg.DEBUG_SPRITE_AT_X = "at x";  // untranslated
Blockly.Msg.DEBUG_SPRITE_COORDS = "render coordinates of";  // untranslated
Blockly.Msg.DEBUG_SPRITE_COORDS_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Utils.Debug.html#spriteCoords";  // untranslated
Blockly.Msg.DEBUG_SPRITE_COORDS_TOOLTIP = "Renders the sprite coordinates in local, positional and world space.";  // untranslated
Blockly.Msg.DEBUG_SPRITE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Utils.Debug.html#spriteInfo";  // untranslated
Blockly.Msg.DEBUG_SPRITE_INFO = "render info of sprite";  // untranslated
Blockly.Msg.DEBUG_SPRITE_INFO_HELP_URL = "";  // untranslated
Blockly.Msg.DEBUG_SPRITE_INFO_TOOLTIP = "";  // untranslated
Blockly.Msg.DEBUG_SPRITE_TOOLTIP = "Draws various information useful for debugging about the specified sprite at the given world coordinates.";  // untranslated
Blockly.Msg.DEBUG_TEXT = "render";  // untranslated
Blockly.Msg.DEBUG_TEXT_HELP_URL = "";  // untranslated
Blockly.Msg.DEBUG_TEXT_TOOLTIP = "";  // untranslated
Blockly.Msg.DEFAULT = "default";  // untranslated
Blockly.Msg.DEFAULT_GRAPHICS_OBJECT_NAME = "graphics";  // untranslated
Blockly.Msg.DEGREES = "degrees";  // untranslated
Blockly.Msg.DELAY = "delay";  // untranslated
Blockly.Msg.DELAY_MICROSECONDS_HELP_URL = "https://www.arduino.cc/en/Reference/DelayMicroseconds";  // untranslated
Blockly.Msg.DELAY_MICROSECONDS_TOOLTIP = "Wait the specified number of microseconds before continuing. There are 1,000,000 microseconds in a second.";  // untranslated
Blockly.Msg.DELAY_MILLISECONDS_HELP_URL = "https://www.arduino.cc/en/Reference/Delay";  // untranslated
Blockly.Msg.DELAY_MILLISECONDS_TOOLTIP = "Wait the specified number of milliseconds before continuing. There are 1,000 milliseconds in a second.";  // untranslated
Blockly.Msg.DELAY_SECONDS_TOOLTIP = "Delay a given number of seconds.";  // untranslated
Blockly.Msg.DELAY_WITH_NAVIGATION_MS = "delay with navigation for ";  // untranslated
Blockly.Msg.DELAY_WITH_NAVIGATION_MS_TOOLTIP = "";  // untranslated
Blockly.Msg.DELAY_WITH_NAVIGATION_SECONDS = "delay with navigation for";  // untranslated
Blockly.Msg.DELAY_WITH_NAVIGATION_SECONDS_TOOLTIP = "";  // untranslated
Blockly.Msg.DELAY_WITH_SIMPLE_NAVIGATION_MS = "delay with simple navigation for";  // untranslated
Blockly.Msg.DELAY_WITH_SIMPLE_NAVIGATION_MS_TOOLTIP = "";  // untranslated
Blockly.Msg.DELAY_WITH_SIMPLE_NAVIGATION_SECONDS = "delay with simple navigation for";  // untranslated
Blockly.Msg.DELAY_WITH_SIMPLE_NAVIGATION_SECONDS_TOOLTIP = "";  // untranslated
Blockly.Msg.DELETE_ALL_BLOCKS = "Izbrišem vseh %1 kock?";
Blockly.Msg.DELETE_BLOCK = "Izbriši kocko";
Blockly.Msg.DELETE_VARIABLE = "Izbriši spremenljivko »%1«";
Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Izbrišem %1 uporab spremenljivke »%2«?";
Blockly.Msg.DELETE_X_BLOCKS = "Izbriši kocke";
Blockly.Msg.DELTA_TIME_MILLISECONDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Time.html#physicsElapsedMS";  // untranslated
Blockly.Msg.DELTA_TIME_MILLISECONDS_TITLE = "delta time in milliseconds";  // untranslated
Blockly.Msg.DELTA_TIME_MILLISECONDS_TOOLTIP = "Get the time elapsed since the last frame in milliseconds.";  // untranslated
Blockly.Msg.DELTA_TIME_SECONDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Time.html#physicsElapsed";  // untranslated
Blockly.Msg.DELTA_TIME_SECONDS_TITLE = "delta time in seconds";  // untranslated
Blockly.Msg.DELTA_TIME_SECONDS_TOOLTIP = "Get the time elapsed since the last frame in seconds.";  // untranslated
Blockly.Msg.DESTROY = "destroy";  // untranslated
Blockly.Msg.DESTROY_GROUP = "destroy group";  // untranslated
Blockly.Msg.DESTROY_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#destroy";  // untranslated
Blockly.Msg.DESTROY_GROUP_MEMBERS = "destroy members too";  // untranslated
Blockly.Msg.DESTROY_GROUP_TOOLTIP = "Destroys a group. Can either leave the members where they are, or destroy them too.";  // untranslated
Blockly.Msg.DESTROY_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Component.Destroy.html";  // untranslated
Blockly.Msg.DESTROY_OBJECT_TOOLTIP = "Will remove the object from the game and memory, after which it can no longer be accessed.";  // untranslated
Blockly.Msg.DESTROY_SPRITE = "children too?";  // untranslated
Blockly.Msg.DESTROY_SPRITE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#destroy";  // untranslated
Blockly.Msg.DESTROY_SPRITE_TOOLTIP = "Deletes a sprite from the game, with an option to delete its children too.";  // untranslated
Blockly.Msg.DESTROY_TIMER = "destroy timer";  // untranslated
Blockly.Msg.DESTROY_TIMER_TOOLTIP = "destroys the timer andy pending events are not dispatched";  // untranslated
Blockly.Msg.DESTROY_TIMER_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#destroy";  // untranslated
Blockly.Msg.DEVICE_BUTTON = "device button";  // untranslated
Blockly.Msg.DEVICE_BUTTON_JUST_PRESSED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.DeviceButton.html#justPressed";  // untranslated
Blockly.Msg.DEVICE_BUTTON_JUST_PRESSED_TOOLTIP = "True if the device button was pressed within 250ms";  // untranslated
Blockly.Msg.DEVICE_BUTTON_JUST_RELEASED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.DeviceButton.html#justReleased";  // untranslated
Blockly.Msg.DEVICE_BUTTON_JUST_RELEASED_TOOLTIP = "True if the device button was released within 250ms";  // untranslated
Blockly.Msg.DIAMETER = "diameter";  // untranslated
Blockly.Msg.DIGITALWRITE = "digital write";  // untranslated
Blockly.Msg.DIGITALWRITE_HELP_URL = "https://www.arduino.cc/en/Reference/DigitalWrite";  // untranslated
Blockly.Msg.DIGITALWRITE_NUMBER = "to pin #";  // untranslated
Blockly.Msg.DIGITALWRITE_TOOLTIP = "Writes either HIGH or LOW to the given pin";  // untranslated
Blockly.Msg.DIGITAL_READ = "digital read pin #";  // untranslated
Blockly.Msg.DIGITAL_READ_HELP_URL = "https://www.arduino.cc/en/Reference/DigitalRead";  // untranslated
Blockly.Msg.DIGITAL_READ_TOOLTIP = "Reads either HIGH or LOW from a digital pin";  // untranslated
Blockly.Msg.DISABLE_BLOCK = "Onemogoči kocko";
Blockly.Msg.DISABLE_STEP = "disable stepping";  // untranslated
Blockly.Msg.DISABLE_STEP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html#disableStep";  // untranslated
Blockly.Msg.DISABLE_STEP_TOOLTIP = "Disables manually stepping into the next game loop. This is the default behavior.";  // untranslated
Blockly.Msg.DISPLAYED_AT = "displayed at";  // untranslated
Blockly.Msg.DOES = "does";  // untranslated
Blockly.Msg.DOM_GETCONTEXT_CONTEXT = "get context";  // untranslated
Blockly.Msg.DOM_GETCONTEXT_DOM = "for dom";  // untranslated
Blockly.Msg.DOWN = "down";  // untranslated
Blockly.Msg.DRAG = "drag";  // untranslated
Blockly.Msg.DRAWCIRCLE = "draw circle at position";  // untranslated
Blockly.Msg.DRAWCIRCLE_DIAMETER = "with diameter:";  // untranslated
Blockly.Msg.DRAWCIRCLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Graphics.html#drawCircle";  // untranslated
Blockly.Msg.DRAWCIRCLE_TOOLTIP = "Draws a circle at a given position in the world. Doesn't work on its own. Put it inside the 'fill shapes with' block.";  // untranslated
Blockly.Msg.DRAW_RECTANGLE = "draw rectangle at position";  // untranslated
Blockly.Msg.DRAW_RECTANGLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Graphics.html#drawRect";  // untranslated
Blockly.Msg.DRAW_RECTANGLE_TOOLTIP = "Draws a rectangle at a given position in the world. Doesn't work on its own. Put it inside the 'fill shapes with' block.";  // untranslated
Blockly.Msg.DRAW_SHAPES_WITH_COLOUR = "fill shapes with ";  // untranslated
Blockly.Msg.DRAW_SHAPES_WITH_COLOUR_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Graphics.html#beginFill";  // untranslated
Blockly.Msg.DRAW_SHAPES_WITH_COLOUR_TOOLTIP = "Start drawing shapes in the world using a given graphics object. Use the shape drawing blocks inside this one.";  // untranslated
Blockly.Msg.DRIVE_ARC = "drive in an arc";  // untranslated
Blockly.Msg.DRIVE_ARC_DEGREES = "turning (degrees)";  // untranslated
Blockly.Msg.DRIVE_ARC_LEFT = "with left motor at";  // untranslated
Blockly.Msg.DRIVE_ARC_RIGHT = "with right motor at";  // untranslated
Blockly.Msg.DRIVE_ARC_SKID_TIME = "with max expected skid time (milliseconds)";  // untranslated
Blockly.Msg.DRIVE_ARC_TOOLTIP = "";  // untranslated
Blockly.Msg.DRIVE_ARC_TURN_TIME = "with max expected turn time (milliseconds)";  // untranslated
Blockly.Msg.DUPLICATE_BLOCK = "Podvoji";
Blockly.Msg.DURATION = "duration";  // untranslated
Blockly.Msg.EDGE_LIGHTS_OFF = "turn edge lights off";  // untranslated
Blockly.Msg.EDGE_LIGHTS_OFF_TOOLTIP = "";  // untranslated
Blockly.Msg.EDGE_LIGHTS_ON = "turn edge lights on";  // untranslated
Blockly.Msg.EDGE_LIGHTS_ON_TOOLTIP = "";  // untranslated
Blockly.Msg.EEPROM_GET_ADDRESS = "EEPROM get data from address";  // untranslated
Blockly.Msg.EEPROM_GET_HELP_URL = "https://www.arduino.cc/en/Reference/EEPROMGet";  // untranslated
Blockly.Msg.EEPROM_GET_TOOLTIP = "";  // untranslated
Blockly.Msg.EEPROM_GET_VARIABLE = "and store in";  // untranslated
Blockly.Msg.EEPROM_PUT_ADDRESS = "to address";  // untranslated
Blockly.Msg.EEPROM_PUT_HELP_URL = "https://www.arduino.cc/en/Reference/EEPROMPut";  // untranslated
Blockly.Msg.EEPROM_PUT_TOOLTIP = "";  // untranslated
Blockly.Msg.EEPROM_PUT_VALUE = "EEPROM set";  // untranslated
Blockly.Msg.EEPROM_READ_ADDRESS = "EEPROM Read address";  // untranslated
Blockly.Msg.EEPROM_READ_HELP_URL = "https://www.arduino.cc/en/Reference/EEPROMRead";  // untranslated
Blockly.Msg.EEPROM_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.EEPROM_UPDATE_ADDRESS = "(if different than current) to address";  // untranslated
Blockly.Msg.EEPROM_UPDATE_HELP_URL = "https://www.arduino.cc/en/Reference/EEPROMUpdate";  // untranslated
Blockly.Msg.EEPROM_UPDATE_TOOLTIP = "";  // untranslated
Blockly.Msg.EEPROM_UPDATE_VALUE = "EEPROM update value at";  // untranslated
Blockly.Msg.EEPROM_WRITE_ADDRESS = "to address";  // untranslated
Blockly.Msg.EEPROM_WRITE_HELP_URL = "https://www.arduino.cc/en/Reference/EEPROMWrite";  // untranslated
Blockly.Msg.EEPROM_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.EEPROM_WRITE_VALUE = "EEPROM write value";  // untranslated
Blockly.Msg.EMITTERS_MAKE_PARTICLES = "make particles from";  // untranslated
Blockly.Msg.EMITTERS_MAKE_PARTICLES_EMITTER = "on emitter";  // untranslated
Blockly.Msg.EMITTERS_MAKE_PARTICLES_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#makeParticles";  // untranslated
Blockly.Msg.EMITTERS_MAKE_PARTICLES_TAG = "image tag";  // untranslated
Blockly.Msg.EMITTERS_MAKE_PARTICLES_TOOLTIP = "Generate a new set of particles for this emitter";  // untranslated
Blockly.Msg.EMITTERS_SET_ALPHA = "set Alpha:";  // untranslated
Blockly.Msg.EMITTERS_SET_ALPHA_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#setAlpha";  // untranslated
Blockly.Msg.EMITTERS_SET_ALPHA_TOOLTIP = "Set the min and max alpha values for this emitter.";  // untranslated
Blockly.Msg.EMITTERS_SET_ALPHA_VI = "set alpha";  // untranslated
Blockly.Msg.EMITTERS_SET_ALPHA_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#setAlpha";  // untranslated
Blockly.Msg.EMITTERS_SET_ALPHA_VI_TOOLTIP = "Set the min and max alpha values for this emitter.";  // untranslated
Blockly.Msg.EMITTERS_SET_GRAVITY = "set Gravity:";  // untranslated
Blockly.Msg.EMITTERS_SET_GRAVITY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#gravity";  // untranslated
Blockly.Msg.EMITTERS_SET_GRAVITY_TOOLTIP = "Set the gravity of generated particles.";  // untranslated
Blockly.Msg.EMITTERS_SET_GRAVITY_VI = "set gravity:";  // untranslated
Blockly.Msg.EMITTERS_SET_GRAVITY_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#gravity";  // untranslated
Blockly.Msg.EMITTERS_SET_GRAVITY_VI_TOOLTIP = "Set the gravity of generated particles";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION = "set rotation:";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_EMITTER = "on emitter,";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#setRotation";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_TOOLTIP = "Set the angular velocity constraints of the particles";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_VI = "set min/max angular velocity";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_VI_EMITTER = "on emitter";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#setRotation";  // untranslated
Blockly.Msg.EMITTERS_SET_ROTATION_VI_TOOLTIP = "Set the angular velocity constraints of the particles.";  // untranslated
Blockly.Msg.EMITTERS_SET_SCALE = "set Scale:";  // untranslated
Blockly.Msg.EMITTERS_SET_SCALE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#setScale";  // untranslated
Blockly.Msg.EMITTERS_SET_SCALE_TOOLTIP = "Set the minimum/maximum scale for particles and the rate to go between.";  // untranslated
Blockly.Msg.EMITTERS_SET_SCALE_VI = "set scale";  // untranslated
Blockly.Msg.EMITTERS_SET_SCALE_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#setScale";  // untranslated
Blockly.Msg.EMITTERS_SET_SCALE_VI_TOOLTIP = "Set the minimum/maximum scale for particles and the rate to go between.";  // untranslated
Blockly.Msg.EMITTERS_SET_SPEED = "set Speed:";  // untranslated
Blockly.Msg.EMITTERS_SET_SPEED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#minParticleSpeed";  // untranslated
Blockly.Msg.EMITTERS_SET_SPEED_TOOLTIP = "Sets the minimum and maximum speeds that an emitted particle will go.";  // untranslated
Blockly.Msg.EMITTERS_SET_SPEED_VI = "set speed";  // untranslated
Blockly.Msg.EMITTERS_SET_SPEED_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#minParticleSpeed";  // untranslated
Blockly.Msg.EMITTERS_SET_SPEED_VI_TOOLTIP = "Sets the minimum and maximum speeds that an emitted particle will go.";  // untranslated
Blockly.Msg.EMITTERS_SET_WIDTH = "set width:";  // untranslated
Blockly.Msg.EMITTERS_SET_WIDTH_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#width";  // untranslated
Blockly.Msg.EMITTERS_SET_WIDTH_TOOLTIP = "Sets the width of the area in which particles will be emitted.";  // untranslated
Blockly.Msg.EMITTERS_START = "start:";  // untranslated
Blockly.Msg.EMITTERS_START_BURST = "Should Burst?";  // untranslated
Blockly.Msg.EMITTERS_START_FREQUENCY = "Frequency";  // untranslated
Blockly.Msg.EMITTERS_START_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#start";  // untranslated
Blockly.Msg.EMITTERS_START_LIEFSPAN = "Lifespan";  // untranslated
Blockly.Msg.EMITTERS_START_QUANTITY = "Quantity";  // untranslated
Blockly.Msg.EMITTERS_START_TOOLTIP = "Start emitting particles.";  // untranslated
Blockly.Msg.EMITTERS_START_VI = "start emitter,";  // untranslated
Blockly.Msg.EMITTERS_START_VI_EXPLODE = "explode";  // untranslated
Blockly.Msg.EMITTERS_START_VI_FREQUENCY = "frequency (ms)";  // untranslated
Blockly.Msg.EMITTERS_START_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#start";  // untranslated
Blockly.Msg.EMITTERS_START_VI_LIFESPAN = "lifespan (ms)";  // untranslated
Blockly.Msg.EMITTERS_START_VI_QUANTITY = "quantity";  // untranslated
Blockly.Msg.EMITTERS_START_VI_TOOLTIP = "Start emitting particles.";  // untranslated
Blockly.Msg.EMITTER_MAKE_PARTICLES = "make particles";  // untranslated
Blockly.Msg.EMITTER_MAKE_PARTICLES_COLLIDE_WORLD = "collide world";  // untranslated
Blockly.Msg.EMITTER_MAKE_PARTICLES_EMITTER = "on emitter";  // untranslated
Blockly.Msg.EMITTER_MAKE_PARTICLES_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Particles.Arcade.Emitter.html#makeParticles";  // untranslated
Blockly.Msg.EMITTER_MAKE_PARTICLES_QAUNTITY = "quantity";  // untranslated
Blockly.Msg.EMITTER_MAKE_PARTICLES_TOOLTIP = "Generate a new set of particles for this emitter";  // untranslated
Blockly.Msg.EMPTY = "empty";  // untranslated
Blockly.Msg.ENABLE_ARCADE_PHYSICS_FOR_OBJECT = "enable arcade physics for";  // untranslated
Blockly.Msg.ENABLE_ARCADE_PHYSICS_FOR_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#enable";  // untranslated
Blockly.Msg.ENABLE_ARCADE_PHYSICS_FOR_OBJECT_TOOLTIP = "Enable physics for this object";  // untranslated
Blockly.Msg.ENABLE_ARCADE_PHYSICS_FOR_OBJECT_VI = "enable arcade physics for sprite";  // untranslated
Blockly.Msg.ENABLE_ARCADE_PHYSICS_FOR_OBJECT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#enable";  // untranslated
Blockly.Msg.ENABLE_ARCADE_PHYSICS_FOR_OBJECT_VI_TOOLTIP = "Enable physics for this sprite";  // untranslated
Blockly.Msg.ENABLE_BLOCK = "Omogoči kocko";
Blockly.Msg.ENABLE_BODY_GROUP = "Enable Body for";  // untranslated
Blockly.Msg.ENABLE_BODY_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#enableBody";  // untranslated
Blockly.Msg.ENABLE_BODY_GROUP_TOOLTIP = "Enable physics body on all sprites in or added to this group.";  // untranslated
Blockly.Msg.ENABLE_BODY_GROUP_VI = "enable body for group";  // untranslated
Blockly.Msg.ENABLE_BODY_GROUP_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#enableBody";  // untranslated
Blockly.Msg.ENABLE_BODY_GROUP_VI_TOOLTIP = "Enable physics body on all sprites in or added to this group.";  // untranslated
Blockly.Msg.ENABLE_STEP = "enable stepping";  // untranslated
Blockly.Msg.ENABLE_STEP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html#enableStep";  // untranslated
Blockly.Msg.ENABLE_STEP_TOOLTIP = "Enables manually stepping through game frames. Usually for debugging purposes.";  // untranslated
Blockly.Msg.EVERY = "every";  // untranslated
Blockly.Msg.EXPAND_ALL = "Razširi kocke";
Blockly.Msg.EXPAND_BLOCK = "Razširi kocko";
Blockly.Msg.EXTERNAL_INPUTS = "Vnosi zunaj";
Blockly.Msg.EYESPREVCOLOUR = "eyes previous color";  // untranslated
Blockly.Msg.EYESPREVCOLOUR_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.EYESPREVCOLOUR_TOOLTIP = "";  // untranslated
Blockly.Msg.FAINTED = "fainted";  // untranslated
Blockly.Msg.FAINT_OBJECT = "faint";  // untranslated
Blockly.Msg.FAINT_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#kill";  // untranslated
Blockly.Msg.FAINT_OBJECT_TOOLTIP = "Will faint the object setting making it non-existent. Reverse with revive.";  // untranslated
Blockly.Msg.FILLED = "filled";  // untranslated
Blockly.Msg.FOLLOW_LOCKON = "lockon";  // untranslated
Blockly.Msg.FOLLOW_PLATFORMER = "platformer";  // untranslated
Blockly.Msg.FOLLOW_STYLE = "with style";  // untranslated
Blockly.Msg.FOLLOW_TOPDOWN = "topdown";  // untranslated
Blockly.Msg.FOLLOW_TOPDOWN_TIGHT = "topdown tight";  // untranslated
Blockly.Msg.FOR = "for";  // untranslated
Blockly.Msg.FPS = "fps";  // untranslated
Blockly.Msg.FRAME = "frame";  // untranslated
Blockly.Msg.FRAMES = "frames";  // untranslated
Blockly.Msg.FRICTION = "friction";  // untranslated
Blockly.Msg.FROM = "from";  // untranslated
Blockly.Msg.FROM_TAG = "from tag";  // untranslated
Blockly.Msg.FUNCTIONNAME = "function name";  // untranslated
Blockly.Msg.GAME = "game";  // untranslated
Blockly.Msg.GAME_CAMERA = "camera";  // untranslated
Blockly.Msg.GAME_CAMERA_TOOLTIP = "reference to the current games camera";  // untranslated
Blockly.Msg.GAME_CAMERA_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Camera.html";  // untranslated
Blockly.Msg.GET = "get";  // untranslated
Blockly.Msg.GETELEMENTBYID_HELP_URL = "";  // untranslated
Blockly.Msg.GETELEMENTBYID_TITLE = "getElementById with ID";  // untranslated
Blockly.Msg.GETELEMENTBYID_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ACCEL_X = "get x acceleration";  // untranslated
Blockly.Msg.GET_ACCEL_X_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ACCEL_Y = "get y acceleration";  // untranslated
Blockly.Msg.GET_ACCEL_Y_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ACCEL_Y_UNZEROED = "get y acceleration unzeroed";  // untranslated
Blockly.Msg.GET_ACCEL_Y_UNZEROED_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ACCEL_Z = "get z acceleration";  // untranslated
Blockly.Msg.GET_ACCEL_Z_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ACTIVE_POINTER = "active game pointer";  // untranslated
Blockly.Msg.GET_ACTIVE_POINTER_HELP_URL = "";  // untranslated
Blockly.Msg.GET_ACTIVE_POINTER_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ANIMATION_BOOLEAN_FIELD_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html";  // untranslated
Blockly.Msg.GET_ANIMATION_BOOLEAN_FIELD_VI_TOOLTIP = "Gets the boolean selected from the specified object.";  // untranslated
Blockly.Msg.GET_ANIMATION_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html";  // untranslated
Blockly.Msg.GET_ANIMATION_NUMERIC_FIELD_TOOLTIP = "Gets the number selected from the specified object.";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY = "get animation.";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_CURRENTANIM = "currentAnim";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_CURRENTFRAME = "currentFrame";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_FRAMEDATA = "frameData";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_FRAMENAME = "frameName";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_FRAMETOTAL = "frameTotal";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_ISLOADED = "isLoaded";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_DROPDOWN_UPDATE = "updateIfVisible";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#destroy";  // untranslated
Blockly.Msg.GET_ANIMATION_PROPERTY_TOOLTIP = "Get a property on from the animaton manager on the object";  // untranslated
Blockly.Msg.GET_ANIMATION_STRING_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html";  // untranslated
Blockly.Msg.GET_ANIMATION_STRING_FIELD_TOOLTIP = "Gets the string selected from the specified object.";  // untranslated
Blockly.Msg.GET_BODY_BOOLEAN_DROPDOWN_MOVING = "isMoving";  // untranslated
Blockly.Msg.GET_BODY_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.GET_BODY_BOOLEAN_FIELD_TOOLTIP = "Set the value of the specified boolean field";  // untranslated
Blockly.Msg.GET_BODY_FIELD_POINT_CLASS = "get point field";  // untranslated
Blockly.Msg.GET_BODY_FIELD_POINT_CLASS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.GET_BODY_FIELD_POINT_CLASS_TOOLTIP = "Gets the value of the specified point as a point object";  // untranslated
Blockly.Msg.GET_BODY_NUMERIC_FIELD = "get numeric field";  // untranslated
Blockly.Msg.GET_BODY_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.GET_BODY_NUMERIC_FIELD_TOOLTIP = "Get the value of the specified numeric field";  // untranslated
Blockly.Msg.GET_BOOLEAN_FIELD = "get boolean field";  // untranslated
Blockly.Msg.GET_BOUNDS = "Get bounds of";  // untranslated
Blockly.Msg.GET_BOUNDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#getBounds";  // untranslated
Blockly.Msg.GET_BOUNDS_TOOLTIP = "Gets the rectangular bounds of most objects in the game.";  // untranslated
Blockly.Msg.GET_CAMERA = "get camera";  // untranslated
Blockly.Msg.GET_CAMERA_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Camera.html";  // untranslated
Blockly.Msg.GET_CAMERA_TOOLTIP = "Returns a reference to the camera.";  // untranslated
Blockly.Msg.GET_CHILD_AT_VI = "get child of";  // untranslated
Blockly.Msg.GET_CHILD_AT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#getChildAt";  // untranslated
Blockly.Msg.GET_CHILD_AT_VI_TOOLTIP = "Finds a specific child on this sprite/image by its index.";  // untranslated
Blockly.Msg.GET_CHILD_INDEX = "Get index of Child";  // untranslated
Blockly.Msg.GET_CHILD_INDEX_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#getChildIndex";  // untranslated
Blockly.Msg.GET_CHILD_INDEX_TOOLTIP = "Finds an index that describes where on the parent this object is. ";  // untranslated
Blockly.Msg.GET_CHILD_INDEX_VI = "get index of child";  // untranslated
Blockly.Msg.GET_CHILD_INDEX_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#getChildIndex";  // untranslated
Blockly.Msg.GET_CHILD_INDEX_VI_TOOLTIP = "Finds an index that describes where on the parent this object is. ";  // untranslated
Blockly.Msg.GET_CURRENT_MOUSE_POSITION = "get mouse position";  // untranslated
Blockly.Msg.GET_CURRENT_MOUSE_POSITION_DIRECTION_DROPDOWN_WORLDX = "worldX";  // untranslated
Blockly.Msg.GET_CURRENT_MOUSE_POSITION_DIRECTION_DROPDOWN_WORLDY = "worldY";  // untranslated
Blockly.Msg.GET_CURRENT_MOUSE_POSITION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Pointer.html#x";  // untranslated
Blockly.Msg.GET_CURRENT_MOUSE_POSITION_TOOLTIP = "Get the position of the mouse, or last active pointer for touch screen interfaces";  // untranslated
Blockly.Msg.GET_DEGREES_PER_SECOND_X = "get degrees per second x";  // untranslated
Blockly.Msg.GET_DEGREES_PER_SECOND_X_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_DEGREES_PER_SECOND_Y = "get degrees per second y";  // untranslated
Blockly.Msg.GET_DEGREES_PER_SECOND_Y_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_DEGREES_PER_SECOND_Z = "get degrees per second z";  // untranslated
Blockly.Msg.GET_DEGREES_PER_SECOND_Z_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_DEGREES_TO_STOP = "get degrees to stop";  // untranslated
Blockly.Msg.GET_DEGREES_TO_STOP_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_DEGREES_X = "get degrees x";  // untranslated
Blockly.Msg.GET_DEGREES_X_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_DEVICE_BUTTON_FIELD = "get device button field";  // untranslated
Blockly.Msg.GET_DEVICE_BUTTON_FIELD_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.DeviceButton.html";  // untranslated
Blockly.Msg.GET_DEVICE_BUTTON_FIELD_VI_TOOLTIP = "Get teh %1 field for the selected DeviceButton";  // untranslated
Blockly.Msg.GET_FIRST = "get first";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_BOOLEAN_FIELD = "get boolean field";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_BOOLEAN_FIELD_TOOLTIP = "Get a boolean property on the object";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_NUMERIC_FIELD = "get numeric field";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_NUMERIC_FIELD_TOOLTIP = "Get a numeric property on the object";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_POINT_FIELD = "get point field";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_POINT_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html";  // untranslated
Blockly.Msg.GET_GAME_OBJECT_POINT_FIELD_TOOLTIP = "Get a point property on the object";  // untranslated
Blockly.Msg.GET_GAME_PAUSE = "get game paused value";  // untranslated
Blockly.Msg.GET_GAME_PAUSE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html#paused";  // untranslated
Blockly.Msg.GET_GAME_PAUSE_TOOLTIP = "Returns the value of the paused state of the Game.";  // untranslated
Blockly.Msg.GET_GYRO_CALIBRATION_MULTIPLIER = "get gyro calibration multiplier";  // untranslated
Blockly.Msg.GET_GYRO_CALIBRATION_MULTIPLIER_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_INPUT_HANDLER_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#toc-3";  // untranslated
Blockly.Msg.GET_INPUT_HANDLER_BOOLEAN_FIELD_TOOLTIP = "Gets the boolean fields of the input handler";  // untranslated
Blockly.Msg.GET_INPUT_HANDLER_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#toc-3";  // untranslated
Blockly.Msg.GET_INPUT_HANDLER_NUMERIC_FIELD_TOOLTIP = "Gets the numeric fields of the input handler";  // untranslated
Blockly.Msg.GET_INPUT_HANDLER_POINT_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#toc-3";  // untranslated
Blockly.Msg.GET_INPUT_HANDLER_POINT_FIELD_TOOLTIP = "Gets the point fields of the input handler";  // untranslated
Blockly.Msg.GET_KEY_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html";  // untranslated
Blockly.Msg.GET_KEY_BOOLEAN_FIELD_TOOLTIP = "Read the boolean values of the given key.";  // untranslated
Blockly.Msg.GET_KEY_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html";  // untranslated
Blockly.Msg.GET_KEY_NUMERIC_FIELD_TOOLTIP = "Read the numeric values of the given key.";  // untranslated
Blockly.Msg.GET_LEFT_MOTOR = "get current left motor speed";  // untranslated
Blockly.Msg.GET_LEFT_MOTOR_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_LOCAL_BOUNDS = "get local bounds of";  // untranslated
Blockly.Msg.GET_LOCAL_BOUNDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#getLocalBounds";  // untranslated
Blockly.Msg.GET_LOCAL_BOUNDS_TOOLTIP = "Gets the rectangular bounds of an object. Bounds are relative to the object itself instead of the world.";  // untranslated
Blockly.Msg.GET_MEMBER_IN_CLASS_GET_MEMBER_NAME = "get %1";  // untranslated
Blockly.Msg.GET_MEMBER_IN_CLASS_GET_VALUE = "get value of";  // untranslated
Blockly.Msg.GET_MEMBER_IN_CLASS_HELP_URL = "";  // untranslated
Blockly.Msg.GET_MEMBER_IN_CLASS_INSTANCE_NAME = "in %1 instance";  // untranslated
Blockly.Msg.GET_MEMBER_IN_CLASS_INSTANCE_NAME_DEFAULT = "class";  // untranslated
Blockly.Msg.GET_MEMBER_IN_CLASS_TOOLTIP = "Access the calling instance";  // untranslated
Blockly.Msg.GET_MOTOR_MA = "get motor max";  // untranslated
Blockly.Msg.GET_MOTOR_MAX_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_NUMERIC_FIELD = "get numeric field";  // untranslated
Blockly.Msg.GET_OBJECTS_AT_LOCATION = "objects from group";  // untranslated
Blockly.Msg.GET_OBJECTS_AT_LOCATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#getObjectsAtLocation";  // untranslated
Blockly.Msg.GET_OBJECTS_AT_LOCATION_OVERLAP = "that overlap with";  // untranslated
Blockly.Msg.GET_OBJECTS_AT_LOCATION_TOOLTIP = "Given a Group and a location this will check to see which Group children overlap with the coordinates.";  // untranslated
Blockly.Msg.GET_OBJECTS_UNDER_POINTER = "objects from group";  // untranslated
Blockly.Msg.GET_OBJECTS_UNDER_POINTER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#getObjectsUnderPointer";  // untranslated
Blockly.Msg.GET_OBJECTS_UNDER_POINTER_OVERLAP = "that overlap with";  // untranslated
Blockly.Msg.GET_OBJECTS_UNDER_POINTER_TOOLTIP = "Given a Group and a Pointer this will check to see which Group children overlap with the Pointer coordinates.";  // untranslated
Blockly.Msg.GET_OBJECT_WIDTH = "get width of ";  // untranslated
Blockly.Msg.GET_OBJECT_WIDTH_HELP_URL = "http://dragondrop.digipen.edu/docs/PIXI.Sprite.html#width";  // untranslated
Blockly.Msg.GET_OBJECT_WIDTH_TOOLTIP = "Gets the width of an object.";  // untranslated
Blockly.Msg.GET_PARAM = "from object";  // untranslated
Blockly.Msg.GET_PARAM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#toc-4";  // untranslated
Blockly.Msg.GET_PARAM_TOOLTIP = "Gets a given numeric field from an object.";  // untranslated
Blockly.Msg.GET_PHYSICS_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html";  // untranslated
Blockly.Msg.GET_PHYSICS_BOOLEAN_FIELD_TOOLTIP = "Gets the boolean value for the selected physics property";  // untranslated
Blockly.Msg.GET_PHYSICS_POINT_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html";  // untranslated
Blockly.Msg.GET_PHYSICS_POINT_FIELD_TOOLTIP = "Gets the point value for the selected physics property";  // untranslated
Blockly.Msg.GET_POINTER_FIELD_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Pointer.html";  // untranslated
Blockly.Msg.GET_POINTER_FIELD_VI_TOOLTIP = "Get the %1 field for the selected Pointer";  // untranslated
Blockly.Msg.GET_POINT_FIELD = "get point field";  // untranslated
Blockly.Msg.GET_POS_X = "get x position";  // untranslated
Blockly.Msg.GET_POS_X_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_POS_Y = "get y position";  // untranslated
Blockly.Msg.GET_POS_Y_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_PRESSED_IR_BUTTON = "get pressed IR button";  // untranslated
Blockly.Msg.GET_PRESSED_IR_BUTTON_HELP_URL = "";  // untranslated
Blockly.Msg.GET_PRESSED_IR_BUTTON_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_RIGHT_MOTOR = "get current right motor speed";  // untranslated
Blockly.Msg.GET_RIGHT_MOTOR_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_ROTATION = "get rotation";  // untranslated
Blockly.Msg.GET_ROTATION_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Sprite.html#angle";  // untranslated
Blockly.Msg.GET_ROTATION_TOOLTIP = "Finds the rotation (in degrees) of a Game Object.";  // untranslated
Blockly.Msg.GET_SOUND_BOOLEAN_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html";  // untranslated
Blockly.Msg.GET_SOUND_BOOLEAN_MEMBER_TOOLTIP = "Get the selected member from the Sound";  // untranslated
Blockly.Msg.GET_SOUND_NUMERIC_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html";  // untranslated
Blockly.Msg.GET_SOUND_NUMERIC_MEMBER_TOOLTIP = "Get the selected member from the Sound";  // untranslated
Blockly.Msg.GET_SOUND_STRING_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html";  // untranslated
Blockly.Msg.GET_SOUND_STRING_MEMBER_TOOLTIP = "Get the selected member from the Sound";  // untranslated
Blockly.Msg.GET_STRING_FIELD = "get string field";  // untranslated
Blockly.Msg.GET_SUPER_HELPURL = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super";  // untranslated
Blockly.Msg.GET_SUPER_TOOLTIP = "Get a reference to the super class";  // untranslated
Blockly.Msg.GET_TIME_NUMERIC_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Time.html";  // untranslated
Blockly.Msg.GET_TIME_NUMERIC_MEMBER_TITLE = "get";  // untranslated
Blockly.Msg.GET_TIME_NUMERIC_MEMBER_TOOLTIP = "Read numeric fields of game time.";  // untranslated
Blockly.Msg.GET_VEL_X = "get x velocity";  // untranslated
Blockly.Msg.GET_VEL_X_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_VEL_Y = "get y velocity";  // untranslated
Blockly.Msg.GET_VEL_Y_TOOLTIP = "";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY = "of the world";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.World.html";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY_NAME_DROPDOWN_CENTERX = "center x";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY_NAME_DROPDOWN_CENTERY = "center y";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY_NAME_DROPDOWN_RANDOMX = "random x";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY_NAME_DROPDOWN_RANDOMY = "random y";  // untranslated
Blockly.Msg.GET_WORLD_PROPERTY_TOOLTIP = "Get a property of the world";  // untranslated
Blockly.Msg.GET_WORLD_REFERENCE = "world";  // untranslated
Blockly.Msg.GET_WORLD_REFERENCE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.World.html";  // untranslated
Blockly.Msg.GET_WORLD_REFERENCE_TOOLTIP = "Returns a reference to the game world. It functions as a group.";  // untranslated
Blockly.Msg.GRAVITY = "gravity";  // untranslated
Blockly.Msg.GREEN = "green";  // untranslated
Blockly.Msg.GROUP = "group";  // untranslated
Blockly.Msg.GROUP_CONTAINS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#contains";  // untranslated
Blockly.Msg.GROUP_CONTAINS_TOOLTIP = "Returns true if a group contains a specified sprite.";  // untranslated
Blockly.Msg.GROUP_COUNT_ALIVE_DEAD = "number of";  // untranslated
Blockly.Msg.GROUP_COUNT_ALIVE_DEAD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#countLiving";  // untranslated
Blockly.Msg.GROUP_COUNT_ALIVE_DEAD_OBJECTS = "objects in group";  // untranslated
Blockly.Msg.GROUP_COUNT_ALIVE_DEAD_TOOLTIP = "Returns the number of alive/dead objects in a group.";  // untranslated
Blockly.Msg.GROUP_GET_ALL = "get all members of group";  // untranslated
Blockly.Msg.GROUP_GET_ALL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getAll";  // untranslated
Blockly.Msg.GROUP_GET_ALL_TOOLTIP = "Returns a list of all members in the specified group.";  // untranslated
Blockly.Msg.GROUP_GET_AT = "get member of group";  // untranslated
Blockly.Msg.GROUP_GET_AT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getAt";  // untranslated
Blockly.Msg.GROUP_GET_AT_TOOLTIP = "Returns a group member at a specified index. Indices start at 0 and go in creation order by default. Returns -1 if it fails.";  // untranslated
Blockly.Msg.GROUP_GET_CLOSEST_TO = "closest to";  // untranslated
Blockly.Msg.GROUP_GET_CLOSEST_TO_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getClosestTo";  // untranslated
Blockly.Msg.GROUP_GET_CLOSEST_TO_MEMBER = "get member of group";  // untranslated
Blockly.Msg.GROUP_GET_CLOSEST_TO_TOOLTIP = "Returns the object in the group whose position is closest to the specified object.";  // untranslated
Blockly.Msg.GROUP_GET_FIRST_ALIVE_DEAD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getFirstAlive";  // untranslated
Blockly.Msg.GROUP_GET_FIRST_ALIVE_DEAD_TOOLTIP = "Gets the first group member that has the given value of its 'alive' field. Returns null if no matching member is found.";  // untranslated
Blockly.Msg.GROUP_GET_FIRST_ALIVE_FAINTED = "get first";  // untranslated
Blockly.Msg.GROUP_GET_FIRST_ALIVE_FAINTED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getFirstAlive";  // untranslated
Blockly.Msg.GROUP_GET_FIRST_ALIVE_FAINTED_TOOLTIP = "Gets the first group member that has the given value of its 'alive' field. Returns null if no matching member is found.";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM = "get random member of group";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM_EXISTS = "that exists";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM_EXISTS_GROUP = "get a random member of group";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM_EXISTS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getRandomExists";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM_EXISTS_TOOLTIP = "Returns a random member of the given group, picking from those whose 'exists' field is set to true.";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#getRandom";  // untranslated
Blockly.Msg.GROUP_GET_RANDOM_TOOLTIP = "Returns a member of the group at random with no bias.";  // untranslated
Blockly.Msg.GROUP_REMOVE_ALL = "remove all members of group";  // untranslated
Blockly.Msg.GROUP_REMOVE_ALL_DESTROY = "destroy them too";  // untranslated
Blockly.Msg.GROUP_REMOVE_ALL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#removeAll";  // untranslated
Blockly.Msg.GROUP_REMOVE_ALL_TOOLTIP = "Empties the specified group. Can either do this by releasing its members or deleting them.";  // untranslated
Blockly.Msg.GYRO_BUFFER_SIZE = "get gyro buffer size";  // untranslated
Blockly.Msg.GYRO_BUFFER_SIZE_TOOLTIP = "";  // untranslated
Blockly.Msg.GYRO_GET_AXIS = "get gyro axis";  // untranslated
Blockly.Msg.GYRO_GET_AXIS_TOOLTIP = "";  // untranslated
Blockly.Msg.GYRO_GET_RANGE_FROM_CHIP = "get gyro range from chip";  // untranslated
Blockly.Msg.GYRO_GET_RANGE_FROM_CHIP_TOOLTIP = "";  // untranslated
Blockly.Msg.GYRO_SET_FREQUENCY = "set gyro frequency";  // untranslated
Blockly.Msg.GYRO_SET_FREQUENCY_TOOLTIP = "";  // untranslated
Blockly.Msg.GYRO_SET_RANGE = "set gyro range";  // untranslated
Blockly.Msg.GYRO_SET_RANGE_TOOLTIP = "";  // untranslated
Blockly.Msg.HALF = "half a second";  // untranslated
Blockly.Msg.HARD = "hard?";  // untranslated
Blockly.Msg.HARDWARESTARTUP = "setup";  // untranslated
Blockly.Msg.HARDWARESTARTUP_ARDUINO_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.HARDWARESTARTUP_ARDUINO_TOOLTIP = "";  // untranslated
Blockly.Msg.HARDWARESTARTUP_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.HARDWARESTARTUP_RINGO_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.HARDWARESTARTUP_RINGO_SETUP = "setup";  // untranslated
Blockly.Msg.HARDWARESTARTUP_RINGO_TOOLTIP = "";  // untranslated
Blockly.Msg.HARDWARESTARTUP_TOOLTIP = "This code is run once when the device is first turned on";  // untranslated
Blockly.Msg.HEADING_WITH_SHORTEST_DISTANCE = "heading with shortest distance from";  // untranslated
Blockly.Msg.HEADING_WITH_SHORTEST_DISTANCE_TOOLTIP = "";  // untranslated
Blockly.Msg.HEIGHT = "height";  // untranslated
Blockly.Msg.HELP = "Pomoč";
Blockly.Msg.HIGH = "HIGH";  // untranslated
Blockly.Msg.HIGH_BYTE = "Get high-byte from Number";  // untranslated
Blockly.Msg.HIGH_BYTE_HELP_URL = "https://www.arduino.cc/en/Reference/HighByte";  // untranslated
Blockly.Msg.HIGH_BYTE_TOOLTIP = "";  // untranslated
Blockly.Msg.HIGH_HELP_URL = "https://www.arduino.cc/en/Reference/Constants";  // untranslated
Blockly.Msg.HIGH_TOOLTIP = "";  // untranslated
Blockly.Msg.HORIZONTAL = "horizontal";  // untranslated
Blockly.Msg.ICON_LOOP = "loop always";  // untranslated
Blockly.Msg.ICON_SETUP = "once at start";  // untranslated
Blockly.Msg.IF_OVERLAPPING = "if overlapping";  // untranslated
Blockly.Msg.IMAGESUBTEXTUREATLAS = "add sprite to game from atlas at";  // untranslated
Blockly.Msg.IMAGESUBTEXTUREATLAS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Loader.html#atlasXML";  // untranslated
Blockly.Msg.IMAGESUBTEXTUREATLAS_ID = "subtexture id";  // untranslated
Blockly.Msg.IMAGESUBTEXTUREATLAS_TOOLTIP = "Adds a sprite to the game using data from a texture atlas.";  // untranslated
Blockly.Msg.IMMOVABLE = "immovable";  // untranslated
Blockly.Msg.IN = "in";  // untranslated
Blockly.Msg.INLINE_INPUTS = "Vnosi v vrsti";
Blockly.Msg.INPUT_HANDLER_BOUNDS_RECT = "set drag bounds of";  // untranslated
Blockly.Msg.INPUT_HANDLER_BOUNDS_RECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#boundsRect";  // untranslated
Blockly.Msg.INPUT_HANDLER_BOUNDS_RECT_TOOLTIP = "A region of the game world within which the sprite is restricted during drag.";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_PIXEL = "pixel alpha at";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_PIXEL_END = "pixelPerfectAlpha ?";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_PIXEL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#checkPixel";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_PIXEL_MIDDLE = "is >=?";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_PIXEL_TOOLTIP = "Compares the alpha value of the pixel at (x,y) and the Sprite pixelPerfectAlpha.";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_POINTER_DOWN = "clicking on";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_POINTER_DOWN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#checkPointerDown";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_POINTER_DOWN_TOOLTIP = "Checks if the given pointer is both down and over the Sprite this InputHandler belongs to.";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_POINTER_OVER = "hovering over";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_POINTER_OVER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#checkPointerOver";  // untranslated
Blockly.Msg.INPUT_HANDLER_CHECK_POINTER_OVER_TOOLTIP = "Checks if the given pointer is over the Sprite this InputHandler belongs to.";  // untranslated
Blockly.Msg.INPUT_HANDLER_DESTROY = "destroy input handler for";  // untranslated
Blockly.Msg.INPUT_HANDLER_DESTROY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#destroy";  // untranslated
Blockly.Msg.INPUT_HANDLER_DESTROY_TOOLTIP = "Clean up memory.";  // untranslated
Blockly.Msg.INPUT_HANDLER_DISABLE_DRAG = "disable drag for";  // untranslated
Blockly.Msg.INPUT_HANDLER_DISABLE_DRAG_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#disableDrag";  // untranslated
Blockly.Msg.INPUT_HANDLER_DISABLE_DRAG_TOOLTIP = "Stops this sprite from being able to be dragged. If it is currently the target of an active drag it will be stopped immediately; also disables any set callbacks.";  // untranslated
Blockly.Msg.INPUT_HANDLER_DISABLE_SNAP = "disable snap for";  // untranslated
Blockly.Msg.INPUT_HANDLER_DISABLE_SNAP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#disableSnap";  // untranslated
Blockly.Msg.INPUT_HANDLER_DISABLE_SNAP_TOOLTIP = "Stops the sprite from snapping to a grid during drag or release.";  // untranslated
Blockly.Msg.INPUT_HANDLER_DOWN_DURATION = "how many milliseconds pointer has clicked on";  // untranslated
Blockly.Msg.INPUT_HANDLER_DOWN_DURATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#downDuration";  // untranslated
Blockly.Msg.INPUT_HANDLER_DOWN_DURATION_TOOLTIP = "If the pointer is currently over this Sprite this returns how long it has been pressed for in milliseconds.";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE = "enable input handler for";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG = "enable drag for";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_COMPLEX_ALPHA = "with alpha threshold";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_COMPLEX_CENTER = "lock to center of pointer";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_COMPLEX_PIXEL = "pixel perfect";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_COMPLEX_RECT = "within the bounds of";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_COMPLEX_TOP = "bring to top";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#enableDrag";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_DRAG_TOOLTIP = "Allow this Sprite to be dragged by any valid pointer.";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_COMPLEX_DRAG = "on drag";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_COMPLEX_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#enableSnap";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_COMPLEX_OFFSET_X = "offset x";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_COMPLEX_OFFSET_Y = "offset y";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_COMPLEX_RELEASE = "on release";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_COMPLEX_TOOLTIP = "Make this Sprite snap to the given grid either during drag or when it's released.";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#enableSnap";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_SNAP_TOOLTIP = "Make this Sprite snap to the given grid either during drag or when it's released.";  // untranslated
Blockly.Msg.INPUT_HANDLER_ENABLE_TOOLTIP = "Makes an input handler for a Sprite and is responsible for managing all Input events on that Sprite.";  // untranslated
Blockly.Msg.INPUT_HANDLER_IS_PIXEL_PERFECT = "input handler is pixel perfect?";  // untranslated
Blockly.Msg.INPUT_HANDLER_IS_PIXEL_PERFECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#isPixelPerfect";  // untranslated
Blockly.Msg.INPUT_HANDLER_IS_PIXEL_PERFECT_TOOLTIP = "Is this object using pixel perfect checking?";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_OUT = "pointer left";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_OUT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#justOut";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_OUT_TOOLTIP = "Returns true if the pointer has left the Sprite within the specified delay time.";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_OVER = "pointer entered";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_OVER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#justOver";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_OVER_TOOLTIP = "Returns true if the pointer has entered the Sprite within the specified delay time.";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_PRESSED = "was pressed within";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_PRESSED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#justPressed";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_PRESSED_TOOLTIP = "Returns true if the pointer has touched or clicked on the Sprite within the specified delay time.";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_RELEASED = "was released within";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_RELEASED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#justReleased";  // untranslated
Blockly.Msg.INPUT_HANDLER_JUST_RELEASED_TOOLTIP = "Returns true if the pointer was touching this Sprite, but has been released within the specified delay time.";  // untranslated
Blockly.Msg.INPUT_HANDLER_OVER_DURATION = "how many milliseconds pointer has hovered over";  // untranslated
Blockly.Msg.INPUT_HANDLER_OVER_DURATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#overDuration";  // untranslated
Blockly.Msg.INPUT_HANDLER_OVER_DURATION_TOOLTIP = "If the pointer is currently over this Sprite this returns how long it has been there for in milliseconds.";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_DOWN = "pointer is down?";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_DOWN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerDown";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_DOWN_TOOLTIP = "If the Pointer is down this returns true.";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_DRAGGED = "pointer is currently dragging";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_DRAGGED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerDragged";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_DRAGGED_TOOLTIP = "Is this sprite being dragged by the mouse or not?";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_POSITION = "position of pointer relative to";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_POSITION_HELP_URL = "";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_POSITION_TOOLTIP = "The position of the Input pointer, relative to the top-left of the parent Sprite.";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_UP = "pointer is up?";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_UP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerUp";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_UP_TOOLTIP = "If the Pointer is up this returns true.";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_X = "x coordinate of pointer relative to";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_X_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerX";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_X_TOOLTIP = "The x coordinate of the Input pointer, relative to the top-left of the parent Sprite.";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_Y = "y coordinate of pointer relative to";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_Y_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerY";  // untranslated
Blockly.Msg.INPUT_HANDLER_POINTER_Y_TOOLTIP = "The y coordinate of the Input pointer, relative to the top-left of the parent Sprite.";  // untranslated
Blockly.Msg.INPUT_HANDLER_RESET = "reset input handler for";  // untranslated
Blockly.Msg.INPUT_HANDLER_RESET_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#reset";  // untranslated
Blockly.Msg.INPUT_HANDLER_RESET_TOOLTIP = "Resets the Input Handler and disables it.";  // untranslated
Blockly.Msg.INPUT_HANDLER_SET_DRAG_LOCK = "to be dragged in directions:";  // untranslated
Blockly.Msg.INPUT_HANDLER_SET_DRAG_LOCK_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#setDragLock";  // untranslated
Blockly.Msg.INPUT_HANDLER_SET_DRAG_LOCK_TOOLTIP = "Restricts this sprite to drag movement only on the given axis.";  // untranslated
Blockly.Msg.INPUT_HANDLER_START = "start input handler for";  // untranslated
Blockly.Msg.INPUT_HANDLER_START_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#start";  // untranslated
Blockly.Msg.INPUT_HANDLER_START_PRIORITY = "with priority";  // untranslated
Blockly.Msg.INPUT_HANDLER_START_TOOLTIP = "Starts the Input Handler running. This is called automatically when you enable input on a Sprite, or can be called directly if you need to set a specific priority.";  // untranslated
Blockly.Msg.INPUT_HANDLER_STOP = "stop input handler for";  // untranslated
Blockly.Msg.INPUT_HANDLER_STOP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#stop";  // untranslated
Blockly.Msg.INPUT_HANDLER_STOP_TOOLTIP = "Stops the Input Handler from running.";  // untranslated
Blockly.Msg.INPUT_POINTER_OUT = "pointer is outside of";  // untranslated
Blockly.Msg.INPUT_POINTER_OUT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerOut";  // untranslated
Blockly.Msg.INPUT_POINTER_OUT_TOOLTIP = "Is the Pointer out this Sprite?";  // untranslated
Blockly.Msg.INPUT_POINTER_OVER = "pointer is over";  // untranslated
Blockly.Msg.INPUT_POINTER_OVER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#pointerOver";  // untranslated
Blockly.Msg.INPUT_POINTER_OVER_TOOLTIP = "Is the Pointer over this Sprite?";  // untranslated
Blockly.Msg.INSIDE = "inside";  // untranslated
Blockly.Msg.INSIDE_CLASS_ONLY_WARNING = "This block can only be used inside of a class!";  // untranslated
Blockly.Msg.INTERSECTS = "intersects";  // untranslated
Blockly.Msg.IN_ARRAY = "in array";  // untranslated
Blockly.Msg.IN_GROUP = "in group";  // untranslated
Blockly.Msg.IN_MILLISECONDS = "in milliseconds";  // untranslated
Blockly.Msg.IN_THE = "in the";  // untranslated
Blockly.Msg.IR_BUTTON = "wink IR button:";  // untranslated
Blockly.Msg.IR_BUTTON_HELP_URL = "";  // untranslated
Blockly.Msg.IR_BUTTON_TOOLTIP = "";  // untranslated
Blockly.Msg.IR_CONTROL = "When ";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_1 = "1";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_10 = "10";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_2 = "2";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_3 = "3";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_4 = "4";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_5 = "5";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_6 = "6";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_7 = "7";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_8 = "8";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_9 = "9";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_A = "A";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_B = "B";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_BACKWARD = "Backward";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_FORWARD = "Forward";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_LEFT = "Left";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_LOGO = "Plum Logo";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_MENU = "Menu";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_PLAY = "Play";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_POWER = "Power";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_RIGHT = "Right";  // untranslated
Blockly.Msg.IR_CONTROL_BUTTON_DROPDOWN_X = "X";  // untranslated
Blockly.Msg.IR_CONTROL_CONTAINER_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.IR_CONTROL_CONTAINER_TOOLTIP = "Code starts running from here when IR data is done being recieved.";  // untranslated
Blockly.Msg.IR_CONTROL_CONTROL = "check key for press";  // untranslated
Blockly.Msg.IR_CONTROL_CONTROL_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.IR_CONTROL_CONTROL_TOOLTIP = "Check to see what key was pressed";  // untranslated
Blockly.Msg.IR_CONTROL_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.IR_CONTROL_PRESSED = "is pressed";  // untranslated
Blockly.Msg.IR_CONTROL_TOOLTIP = "";  // untranslated
Blockly.Msg.IR_WHEN = "if ";  // untranslated
Blockly.Msg.IR_WHEN_BUTTON = "button";  // untranslated
Blockly.Msg.IR_WHEN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.IR_WHEN_PRESSED = "is pressed";  // untranslated
Blockly.Msg.IR_WHEN_TOOLTIP = "";  // untranslated
Blockly.Msg.IS = "is";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING = "is body touching";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html#touching";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_TOOLTIP = "Check to see if the object is being touched in the given direction.";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI = "is touching";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_DIRECTION_DROPDOWN_DOWN = "Down";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_DIRECTION_DROPDOWN_LEFT = "Left";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_DIRECTION_DROPDOWN_NONE = "None";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_DIRECTION_DROPDOWN_RIGHT = "Right";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_DIRECTION_DROPDOWN_UP = "Up";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html#touching";  // untranslated
Blockly.Msg.IS_BODY_TOUCHING_VI_TOOLTIP = "Check to see if the object is being touched in the given direction.";  // untranslated
Blockly.Msg.IS_IR_DONE = "is IR done?";  // untranslated
Blockly.Msg.IS_IR_DONE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.IS_IR_DONE_TOOLTIP = "Checks to see if we received an IR input to process";  // untranslated
Blockly.Msg.IS_KEY_DOWN = "is down?";  // untranslated
Blockly.Msg.IS_KEY_DOWN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Keyboard.html#isDown";  // untranslated
Blockly.Msg.IS_KEY_DOWN_TOOLTIP = "Checks if the given key is down";  // untranslated
Blockly.Msg.IS_MOUSE_BUTTON_CLICKED = "mouse button is clicked?";  // untranslated
Blockly.Msg.IS_MOUSE_BUTTON_CLICKED_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Pointer.html#isDown";  // untranslated
Blockly.Msg.IS_MOUSE_BUTTON_CLICKED_TOOLTIP = "Is the specified button clicked";  // untranslated
Blockly.Msg.IS_OVER_EDGE = "is over edge";  // untranslated
Blockly.Msg.IS_OVER_EDGE_TOOLTIP = "";  // untranslated
Blockly.Msg.IS_STATIONARY = "is ringo stationary";  // untranslated
Blockly.Msg.IS_STATIONARY_TOOLTIP = "";  // untranslated
Blockly.Msg.JAVASCRIPT_EVAL_HELP_URL = "developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval";  // untranslated
Blockly.Msg.JAVASCRIPT_EVAL_OUTPUT_HELP_URL = "developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval";  // untranslated
Blockly.Msg.JAVASCRIPT_EVAL_OUTPUT_TITLE = "eval with output";  // untranslated
Blockly.Msg.JAVASCRIPT_EVAL_OUTPUT_TOOLTIP = "Execute the JavaScript expression returning the value";  // untranslated
Blockly.Msg.JAVASCRIPT_EVAL_TITLE = "eval";  // untranslated
Blockly.Msg.JAVASCRIPT_EVAL_TOOLTIP = "Execute the JavaScript expression";  // untranslated
Blockly.Msg.JUST_PRESSED = "just pressed?";  // untranslated
Blockly.Msg.JUST_RELEASED = "just released?";  // untranslated
Blockly.Msg.KEY = "key";  // untranslated
Blockly.Msg.KEYS = "keys";  // untranslated
Blockly.Msg.KEY_DOWN_DURATION = "has been down for";  // untranslated
Blockly.Msg.KEY_DOWN_DURATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html#downDuration";  // untranslated
Blockly.Msg.KEY_DOWN_DURATION_TOOLTIP = "Returns true if the Key was pressed down within the duration value given, or false if it either isn't down, or was pressed down longer ago than then given duration.";  // untranslated
Blockly.Msg.KEY_JUST_PRESSED = "just pressed?";  // untranslated
Blockly.Msg.KEY_JUST_PRESSED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html#justPressed";  // untranslated
Blockly.Msg.KEY_JUST_PRESSED_TOOLTIP = "Returns true if the Key was just pressed down this update tick, or false if it either isn't down, or was pressed down on a previous update tick.";  // untranslated
Blockly.Msg.KEY_JUST_RELEASED = "just released?";  // untranslated
Blockly.Msg.KEY_JUST_RELEASED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html#justReleased";  // untranslated
Blockly.Msg.KEY_JUST_RELEASED_TOOLTIP = "Returns true if the Key was just pressed down this update tick, or false if it either isn't down, or was pressed down on a previous update tick.";  // untranslated
Blockly.Msg.KEY_RESET_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html#reset";  // untranslated
Blockly.Msg.KEY_RESET_TOOLTIP = "Resets the state of this Key.";  // untranslated
Blockly.Msg.KEY_UP_DURATION = "has been up for";  // untranslated
Blockly.Msg.KEY_UP_DURATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Key.html#upDuration";  // untranslated
Blockly.Msg.KEY_UP_DURATION_TOOLTIP = "Returns true if the Key was pressed down within the duration value given, or false if it either isn't down, or was pressed down longer ago than then given duration.";  // untranslated
Blockly.Msg.KILL_OBJECT = "kill";  // untranslated
Blockly.Msg.KILL_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#kill";  // untranslated
Blockly.Msg.KILL_OBJECT_TOOLTIP = "Will kill the object setting making it non-existent. Reverse with revive.";  // untranslated
Blockly.Msg.LED_BUILTIN = "LED_BUILTIN";  // untranslated
Blockly.Msg.LED_BUILTIN_HELP_URL = "https://www.arduino.cc/en/Reference/Constants";  // untranslated
Blockly.Msg.LED_BUILTIN_TOOLTIP = "";  // untranslated
Blockly.Msg.LEFT = "left";  // untranslated
Blockly.Msg.LEFTPREVCOLOUR = "left previous color";  // untranslated
Blockly.Msg.LEFTPREVCOLOUR_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.LEFTPREVCOLOUR_TOOLTIP = "";  // untranslated
Blockly.Msg.LEFT_CENTER = "left center";  // untranslated
Blockly.Msg.LEFT_EYE = "left eye";  // untranslated
Blockly.Msg.LERP_X = "lerp x";  // untranslated
Blockly.Msg.LERP_Y = "lerp y";  // untranslated
Blockly.Msg.LIGHT_EFFECT_DISCO_LIGHTS = "Makes the eyes twinkle with blues, greens, and purples for the specified time in seconds.";  // untranslated
Blockly.Msg.LIGHT_EFFECT_FIREWORK_LIGHTS = "Makes the eyes flicker as if a firework had gone off for the specified time in seconds.";  // untranslated
Blockly.Msg.LIGHT_EFFECT_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.LIGHT_EFFECT_POLICE_LIGHTS = "Makes the eyes flash red and blue for the specified time in seconds.";  // untranslated
Blockly.Msg.LIGHT_EFFECT_RAINBOW_LIGHT = "Makes the eyes cycle through the rainbow for the specified time in seconds.";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "ustvari prazen seznam";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Vrne seznam, dolžine 0, ki ne vsebuje nobenih podatkov.";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "seznam";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Doda, odstrani ali spremeni vrstni red elementov tega seznama.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "ustvari seznam s/z";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Doda element seznamu.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Ustvari seznam s poljubnim številom elementov.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "prvo mesto";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "mesto št. od konca";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "št.";
Blockly.Msg.LISTS_GET_INDEX_GET = "vrni";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "odstrani in vrni";
Blockly.Msg.LISTS_GET_INDEX_LAST = "zadnje mesto";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "naključno mesto";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "odstrani";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Vrne prvi element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Vrne element na določenem mestu v seznamu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Vrne zadnji element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Vrne naključni element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Odstrani in vrne prvi element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Odstrani in vrne element na določenem mestu v seznamu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Odstrani in vrne zadnji element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Odstrani in vrne naključni element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Odstrani prvi element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Odstrani element na določenem mestu v seznamu.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Odstrani zadnji element seznama.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Odstrani naključni element seznama.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "do mesta št. od konca";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "do mesta št.";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "do zadnjega mesta";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "ustvari podseznam od prvega mesta";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "ustvari podseznam od mesta št. od konca";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "ustvari podseznam od mesta št.";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Ustvari nov seznam, kot kopijo določenega dela seznama.";
Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "Zadnji element je št. %1.";
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "Prvi element je št. %1.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "najdi prvo pojavitev elementa";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "najdi zadnjo pojavitev elementa";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Vrne mesto (indeks) prve/zadnje pojavitve elementa v seznamu. Če elementa ne najde, vrne %1.";
Blockly.Msg.LISTS_INLIST = "v seznamu";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 je prazen";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Vrne resnično, če je seznam prazen.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "dolžina %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Vrne dolžino seznama.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "ustvari seznam z elementom %1, ki se ponovi %2 krat";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Ustvari seznam z danim elementom, ki se poljubno mnogo krat ponovi.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "element";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "vstavi na";
Blockly.Msg.LISTS_SET_INDEX_SET = "nastavi na";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Vstavi element na začetek seznama.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Vstavi element na določeno mesto v seznamu.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Doda element na konec seznama.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Vstavi element na naključno mesto v seznamu.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Nastavi prvi element seznama.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Nastavi element na določenem mestu v seznamu.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Nastavi zadnji element seznama.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Nastavi naključni element seznama.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "naraščajoče";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "padajoče";
Blockly.Msg.LISTS_SORT_TITLE = "uredi %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Uredi kopijo seznama.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "abecedno, brez velikosti črk";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "številčno";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "abecedno";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "ustvari seznam iz besedila";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "ustvari besedilo iz seznama";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Združi seznam besedil v eno besedilo, ločeno z ločilom.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Razdruži besedilo v seznam besedil. Za razdruževanje besedila uporabi ločilo.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "z ločilom";
Blockly.Msg.LIST_FIND_CLOSEST = "in the list";  // untranslated
Blockly.Msg.LIST_FIND_CLOSEST_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ArrayUtils.html#_findClosest";  // untranslated
Blockly.Msg.LIST_FIND_CLOSEST_NUMBER = "find the number closest to";  // untranslated
Blockly.Msg.LIST_FIND_CLOSEST_TOOLTIP = "Returns the value closest to the given number in a sorted, numeric list. If two values are equally close, it returns the higher one.";  // untranslated
Blockly.Msg.LIST_GET_RANDOM = "get a random item from";  // untranslated
Blockly.Msg.LIST_GET_RANDOM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ArrayUtils.html#_getRandomItem";  // untranslated
Blockly.Msg.LIST_GET_RANDOM_TOOLTIP = "Returns a random item from the given list.";  // untranslated
Blockly.Msg.LIST_REMOVE_RANDOM_ITEM = "get and remove a random item from";  // untranslated
Blockly.Msg.LIST_REMOVE_RANDOM_ITEM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ArrayUtils.html#_removeRandomItem";  // untranslated
Blockly.Msg.LIST_REMOVE_RANDOM_ITEM_TOOLTIP = "Removes a random item from a list and returns it. Note that this modifies the list.";  // untranslated
Blockly.Msg.LIST_SHUFFLE = "shuffle";  // untranslated
Blockly.Msg.LIST_SHUFFLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ArrayUtils.html#_shuffle";  // untranslated
Blockly.Msg.LIST_SHUFFLE_TOOLTIP = "Randomly rearranges the order of items in a list. Works for more than just cards.";  // untranslated
Blockly.Msg.LOAD_SOUND = "create sound";  // untranslated
Blockly.Msg.LOAD_SOUND_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Loader.html#audio";  // untranslated
Blockly.Msg.LOAD_SOUND_TOOLTIP = "Loads an audio file so you can use it later. The tag is a name you use to access it later. The source is a file path. URLs work as a source too, but this is not recommended.";  // untranslated
Blockly.Msg.LOAD_TEXTURE = "change texture of";  // untranslated
Blockly.Msg.LOAD_TEXTURE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#loadTexture";  // untranslated
Blockly.Msg.LOAD_TEXTURE_TAG = "to tag";  // untranslated
Blockly.Msg.LOAD_TEXTURE_TOOLTIP = "This changes the texture of this sprite/image entirely. If it is part of a sprite sheet. Warning: slow.";  // untranslated
Blockly.Msg.LOCKON = "lockon";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "neresnično";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Vrne resnično ali neresnično.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "resnično";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Vrne resnično, če sta vnosa enaka.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Vrne resnično, če je prvi vnos večji od drugega.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Vrne resnično, če je prvi vnos večji ali enak drugemu.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Vrne resnično, če je prvi vnos manjši od drugega.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Vrne resnično, če je prvi vnos manjši ali enak drugemu.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Vrne resnično, če vnosa nista enaka.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "ne %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Vrne resnično, če je vnos neresničen. Vrne neresnično, če je vnos resničen.";
Blockly.Msg.LOGIC_NULL = "prazno";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Vrne prazno.";
Blockly.Msg.LOGIC_OPERATION_AND = "in";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "ali";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Vrne resnično, če sta oba vnosa resnična.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Vrne resnično, če je vsaj eden od vnosov resničen.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "če neresnično";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "če resnično";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Preveri pogoj v »testu«. Če je pogoj resničen, potem vrne vrednost »če resnično«; sicer vrne vrednost »če neresnično«.";
Blockly.Msg.LOG_CONSOLE_HELP_URL = "https://en.wikipedia.org/wiki/System_console";  // untranslated
Blockly.Msg.LOG_CONSOLE_TITLE = "log to console";  // untranslated
Blockly.Msg.LOG_CONSOLE_TOOLTIP = "Logs a message to the debug console. Used correctly, this is a very powerful debugging tool.";  // untranslated
Blockly.Msg.LOOK_AT_EDGE = "look at edge";  // untranslated
Blockly.Msg.LOOK_AT_EDGE_TOOLTIP = "It looks at each edge sensor with the light off and then on. It also updates a running average for each sensor, and updates global variables.";  // untranslated
Blockly.Msg.LOOK_FOR_EDGE = "look for edge";  // untranslated
Blockly.Msg.LOOK_FOR_EDGE_TOOLTIP = "LookForEdge()calls LookAtEdge(). After calling LookAtEdge(), the rest of the LookForEdge()function determines if an edge was seen for each of the 3 sensors, andfurthermore, determines if a bright edge was seen or a dark edge is seen. LookForEdge() returns a byte which includes 8 “bits”. Each “bit” is flipped to a 1depending on which edge was seen and whether it was bright or dark.";  // untranslated
Blockly.Msg.LOOP = "loop";  // untranslated
Blockly.Msg.LOOPING = "looping";  // untranslated
Blockly.Msg.LOOP_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.LOOP_TOOLTIP = "This code is run continuously once the device is turned on";  // untranslated
Blockly.Msg.LOW = "LOW";  // untranslated
Blockly.Msg.LOW_BYTE = "Get low-byte from Number";  // untranslated
Blockly.Msg.LOW_BYTE_HELP_URL = "https://www.arduino.cc/en/Reference/LowByte";  // untranslated
Blockly.Msg.LOW_BYTE_TOOLTIP = "";  // untranslated
Blockly.Msg.LOW_HELP_URL = "https://www.arduino.cc/en/Reference/Constants";  // untranslated
Blockly.Msg.LOW_TOOLTIP = "";  // untranslated
Blockly.Msg.MAINTAIN_HEADING = "maintain heading with ";  // untranslated
Blockly.Msg.MAINTAIN_HEADING_DIRECTION = "direction";  // untranslated
Blockly.Msg.MAINTAIN_HEADING_RESET = "reset maintain heading";  // untranslated
Blockly.Msg.MAINTAIN_HEADING_RESET_TOOLTIP = "";  // untranslated
Blockly.Msg.MAINTAIN_HEADING_SPEED = "and speed";  // untranslated
Blockly.Msg.MAINTAIN_HEADING_TOOLTIP = "";  // untranslated
Blockly.Msg.MAINTAIN_HEADING_WIGGLE = "and wiggle";  // untranslated
Blockly.Msg.MAKE = "make";  // untranslated
Blockly.Msg.MASS = "mass";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Vrne vsoto dveh števil.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Vrne kvocient dveh števil.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Vrne razliko dveh števil.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Vrne zmnožek dveh števil.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Vrne prvo število na potenco drugega števila.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "spremeni %1 za %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Prišteje število k spremenljivki '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Vrne eno izmed običajnih konstant: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ali ∞ (neskončno).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "omeji %1 na najmanj %2 in največ %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Omeji število, da bo med določenima (vključenima) mejama.";
Blockly.Msg.MATH_DEG_TO_RAD = "convert degrees";  // untranslated
Blockly.Msg.MATH_DEG_TO_RAD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Math.html#degToRad";  // untranslated
Blockly.Msg.MATH_DEG_TO_RAD_RESULT = "to radians";  // untranslated
Blockly.Msg.MATH_DEG_TO_RAD_TOOLTIP = "Converts a value in degrees to an equivalent in radians.";  // untranslated
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "je deljivo s/z";
Blockly.Msg.MATH_IS_EVEN = "je sodo";
Blockly.Msg.MATH_IS_NEGATIVE = "je negativno";
Blockly.Msg.MATH_IS_ODD = "je liho";
Blockly.Msg.MATH_IS_POSITIVE = "je pozitivno";
Blockly.Msg.MATH_IS_PRIME = "je praštevilo";
Blockly.Msg.MATH_IS_TOOLTIP = "Preveri, če je število sodo, liho, praštevilo, celo, pozitivno, negativno ali, če je deljivo z določenim številom. Vrne resnično ali neresnično.";
Blockly.Msg.MATH_IS_WHOLE = "je celo";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "ostanek pri %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Vrne ostanek pri deljenju dveh števil.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_BINARY = "binary";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Število.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "povprečje seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maksimum seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimum seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modus seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "naključni element seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standardni odklon seznama";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "vsota seznama";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Vrne povprečje (aritmetično sredino) števil na seznamu.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Vrne največje število na seznamu.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Vrne mediano števil na seznamu.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Vrne najmanjše število na seznamu.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Vrne seznam najpogostejšega elementa(-ov) na seznamu.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Vrne naključno število izmed števil na seznamu.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Vrne standardni odklon seznama.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Vrne vsoto vseh števil na seznamu.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RAD_TO_DEG = "convert radians";  // untranslated
Blockly.Msg.MATH_RAD_TO_DEG_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Math.html#radToDeg";  // untranslated
Blockly.Msg.MATH_RAD_TO_DEG_RESULT = "to degrees";  // untranslated
Blockly.Msg.MATH_RAD_TO_DEG_TOOLTIP = "Converts an angle in degrees to an equivalent in radians.";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "naključni ulomek";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Vrne naključni ulomek med (vključno) 0.0 in 1.0 (izključno).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "naključno število med %1 in %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Vrne naključno število med dvema določenima mejama, vključno z mejama.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "zaokroži";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "zaokroži navzdol";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "zaokroži navzgor";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Zaokroži število navzgor ali navzdol.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolutno";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "kvadratni koren";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Vrne absolutno vrednost števila.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Vrne e na potenco števila.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Vrne naravni logaritem števila.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Vrne desetiški logaritem števila.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Vrne negacijo števila.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Vrne 10 na potenco števila.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Vrne kvadratni koren števila.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Vrne arkus kosinus števila.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Vrne arkus sinus števila.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Vrne arkus tangens števila.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Vrne kosinus kota v stopinjah (ne radianih).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Vrne sinus kota v stopinjah (ne radianih).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Vrne tangens kota v stopinjah (ne radianih).";
Blockly.Msg.MAX = "max";  // untranslated
Blockly.Msg.MAXANGULARVELOCITY = "maxAngularVelocity";  // untranslated
Blockly.Msg.MAXVELOCITY = "maxVelocity";  // untranslated
Blockly.Msg.MAX_EXPECTED_TURN_TIME = "with max expected turn time (milliseconds)";  // untranslated
Blockly.Msg.MAX_TIME_MS = "max time (ms):";  // untranslated
Blockly.Msg.MAX_X = "max x";  // untranslated
Blockly.Msg.MAX_Y = "max y";  // untranslated
Blockly.Msg.MEMBER_DEFINITION_CREATE = "create";  // untranslated
Blockly.Msg.MEMBER_DEFINITION_DEFAULT_TEXT = "name";  // untranslated
Blockly.Msg.MEMBER_DEFINITION_HELP_URL = "";  // untranslated
Blockly.Msg.MEMBER_DEFINITION_TOOLTIP = "";  // untranslated
Blockly.Msg.MEMBER_DEFINITION_WITH_VALUE = "with value";  // untranslated
Blockly.Msg.MEMBER_OF_GROUP = "member of group";  // untranslated
Blockly.Msg.METHOD_DEFINITION_DEFAULT_TEXT = "to do something";  // untranslated
Blockly.Msg.METHOD_DEFINITION_HELP_URL = "";  // untranslated
Blockly.Msg.METHOD_DEFINITION_TITLE = "to";  // untranslated
Blockly.Msg.METHOD_DEFINITION_TOOLTIP = "";  // untranslated
Blockly.Msg.MICROSECONDS = "microseconds";  // untranslated
Blockly.Msg.MICROSECONDS_SINCE_START_HELP_URL = "https://www.arduino.cc/en/Reference/Micros";  // untranslated
Blockly.Msg.MICROSECONDS_SINCE_START_TOOLTIP = "Gets the number of microseconds since start of the program. There are 1,000,000 microseconds in a second.";  // untranslated
Blockly.Msg.MIDDLE = "middle";  // untranslated
Blockly.Msg.MILLISECONDS = "milliseconds";  // untranslated
Blockly.Msg.MILLISECONDS_SINCE_START_HELP_URL = "https://www.arduino.cc/en/Reference/Millis";  // untranslated
Blockly.Msg.MILLISECONDS_SINCE_START_TOOLTIP = "Gets the number of milliseconds since start of the program. There are 1,000 milliseconds in a second.";  // untranslated
Blockly.Msg.MIN = "min";  // untranslated
Blockly.Msg.MINUTE = "one minute";  // untranslated
Blockly.Msg.MIN_TURN = "minimum turn";  // untranslated
Blockly.Msg.MIN_TURN_TOOLTIP = "";  // untranslated
Blockly.Msg.MIN_TURN_TO_HEADING = "minimum turn to heading";  // untranslated
Blockly.Msg.MIN_TURN_TO_HEADING_TOOLTIP = "";  // untranslated
Blockly.Msg.MIN_X = "min x";  // untranslated
Blockly.Msg.MIN_Y = "min y";  // untranslated
Blockly.Msg.MOTORS = "set motor speed";  // untranslated
Blockly.Msg.MOTORS_BEGIN = "begin motors";  // untranslated
Blockly.Msg.MOTORS_BEGIN_TOOLTIP = "";  // untranslated
Blockly.Msg.MOTORS_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.MOTORS_LEFT = "left speed";  // untranslated
Blockly.Msg.MOTORS_RIGHT = "right speed";  // untranslated
Blockly.Msg.MOTORS_TOOLTIP = "Sets the motor speed to something positive or negative for both the left and right motor";  // untranslated
Blockly.Msg.MOUSE_POSITION_POINT = "get current mouse position";  // untranslated
Blockly.Msg.MOUSE_POSITION_POINT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Mouse.html";  // untranslated
Blockly.Msg.MOUSE_POSITION_POINT_TOOLTIP = "Returns a Point with the mouse position.";  // untranslated
Blockly.Msg.MOVE = "move";  // untranslated
Blockly.Msg.MOVE_BY = "move position of object";  // untranslated
Blockly.Msg.MOVE_BY_HELP_URL = "";  // untranslated
Blockly.Msg.MOVE_BY_TOOLTIP = "Add (x,y) to the position of the object";  // untranslated
Blockly.Msg.MOVE_DOWN = "down";  // untranslated
Blockly.Msg.MOVE_DOWN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#moveDown";  // untranslated
Blockly.Msg.MOVE_DOWN_TOOLTIP = "Moves this sprite/image down one place in the display order. If sprites overlap, it will be more likely to display underneath others.";  // untranslated
Blockly.Msg.MOVE_TO_OBJECT = "move game object";  // untranslated
Blockly.Msg.MOVE_TO_OBJECT_2 = "to object";  // untranslated
Blockly.Msg.MOVE_TO_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#moveToObject";  // untranslated
Blockly.Msg.MOVE_TO_OBJECT_SPEED = "pixels per second";  // untranslated
Blockly.Msg.MOVE_TO_OBJECT_TIME = "max time (ms)";  // untranslated
Blockly.Msg.MOVE_TO_OBJECT_TOOLTIP = "Move the object to the given object at the given speed";  // untranslated
Blockly.Msg.MOVE_TO_POINTER = "move game object";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_EXTENDED = "move game object";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_EXTENDED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#moveToPointer";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_EXTENDED_LOCATION = "to mouse pointer at";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_EXTENDED_SPEED = "pixels per second.";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_EXTENDED_TIME = "Max time (ms)";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_EXTENDED_TOOLTIP = "Move the object to the pointer at the given speed";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#moveToPointer";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_LOCATION = "to mouse pointer at";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_SPEED = "pixels per second";  // untranslated
Blockly.Msg.MOVE_TO_POINTER_TOOLTIP = "Move the object to the pointer at the given speed";  // untranslated
Blockly.Msg.MOVE_UP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#moveUp";  // untranslated
Blockly.Msg.MOVE_UP_TOOLTIP = "Moves this sprite up one place in the display order. If sprites overlap, it will be more likely to display on top of others.";  // untranslated
Blockly.Msg.NAME = "name";  // untranslated
Blockly.Msg.NAVIGATION_PAUSED = "is navigation paused";  // untranslated
Blockly.Msg.NAVIGATION_PAUSED_TOOLTIP = "";  // untranslated
Blockly.Msg.NAVIGATION_XY = "navigation xy with";  // untranslated
Blockly.Msg.NAVIGATION_XY_ACCELERATION = "acceleration sensitivity";  // untranslated
Blockly.Msg.NAVIGATION_XY_GYRO = "gyro sensitivity";  // untranslated
Blockly.Msg.NAVIGATION_XY_TOOLTIP = "";  // untranslated
Blockly.Msg.NEW_VARIABLE = "Ustvari spremenljivko ...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Ime nove spremenljivke:";
Blockly.Msg.NON_STATIONARY_AXIS = "get non-stationary axis";  // untranslated
Blockly.Msg.NON_STATIONARY_AXIS_TOOLTIP = "";  // untranslated
Blockly.Msg.NON_STATIONARY_VALUE = "get non-stationary value";  // untranslated
Blockly.Msg.NON_STATIONARY_VALUE_TOOLTIP = "";  // untranslated
Blockly.Msg.NUMBER_LIST = "create a list with every number from";  // untranslated
Blockly.Msg.NUMBER_LIST_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ArrayUtils.html#_numberArray";  // untranslated
Blockly.Msg.NUMBER_LIST_STEP = "create a list from";  // untranslated
Blockly.Msg.NUMBER_LIST_STEP_AMOUNT = "stepping by";  // untranslated
Blockly.Msg.NUMBER_LIST_STEP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.ArrayUtils.html#_numberArrayStep";  // untranslated
Blockly.Msg.NUMBER_LIST_STEP_TOOLTIP = "Creates a list in the given range, counting up by a specified value. Does NOT include the end of the range.";  // untranslated
Blockly.Msg.NUMBER_LIST_TOOLTIP = "Creates a list of numbers, in order within the specified range, including the start and end.";  // untranslated
Blockly.Msg.OBJECT_INCAMERA = "in camera?";  // untranslated
Blockly.Msg.OBJECT_INCAMERA_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Component.InCamera.html";  // untranslated
Blockly.Msg.OBJECT_INCAMERA_TOOLTIP = "Checks if an object is inside the boundaries of the camera.";  // untranslated
Blockly.Msg.OBJECT_SET_TO_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#setTo";  // untranslated
Blockly.Msg.OBJECT_SET_TO_SETX = "set x to";  // untranslated
Blockly.Msg.OBJECT_SET_TO_SETY = "set y to";  // untranslated
Blockly.Msg.OBJECT_SET_TO_TOOLTIP = "Sets the x and y fields of an object.";  // untranslated
Blockly.Msg.OF = "of";  // untranslated
Blockly.Msg.OFF = "off";  // untranslated
Blockly.Msg.OFFSET_Y = "offset y pixels";  // untranslated
Blockly.Msg.OFF_CHIRP = "turn chirp off";  // untranslated
Blockly.Msg.OFF_CHIRP_TOOLTIP = "";  // untranslated
Blockly.Msg.OFF_PIXEL = "turn";  // untranslated
Blockly.Msg.OFF_PIXELS = "turn all pixels off";  // untranslated
Blockly.Msg.OFF_PIXELS_TOOLTIP = "";  // untranslated
Blockly.Msg.OFF_PIXEL_TOOLTIP = "";  // untranslated
Blockly.Msg.ON = "on";  // untranslated
Blockly.Msg.ON_EMITTER = "on emitter,";  // untranslated
Blockly.Msg.ON_GAMEOBJECT = "on gameobject";  // untranslated
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.OUT_OF_BOUNDS_FAINT = "get deleted if it leaves the world?";  // untranslated
Blockly.Msg.OUT_OF_BOUNDS_FAINT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#outOfBoundsKill";  // untranslated
Blockly.Msg.OUT_OF_BOUNDS_FAINT_TOOLTIP = "Will automatically destroy this object if it goes outside the world bounds. Warning: this will not work on objects that are not checking to see if they are inside the world.";  // untranslated
Blockly.Msg.OUT_OF_BOUNDS_KILL = "get deleted if it leaves the world?";  // untranslated
Blockly.Msg.OUT_OF_BOUNDS_KILL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#outOfBoundsKill";  // untranslated
Blockly.Msg.OUT_OF_BOUNDS_KILL_TOOLTIP = "Will automatically destroy this object if it goes outside the world bounds. Warning: this will not work on objects that are not checking to see if they are inside the world.";  // untranslated
Blockly.Msg.OVER = "over";  // untranslated
Blockly.Msg.OVERLAP_BOOLEAN = "is overlapping with";  // untranslated
Blockly.Msg.OVERLAP_BOOLEAN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#overlap";  // untranslated
Blockly.Msg.OVERLAP_BOOLEAN_TOOLTIP = "Checks for overlaps between two game objects, returning true if they are overlapping, and false if they are not.";  // untranslated
Blockly.Msg.PAUSED = "paused";  // untranslated
Blockly.Msg.PAUSE_NAVIGATION = "pause navigation";  // untranslated
Blockly.Msg.PAUSE_NAVIGATION_TOOLTIP = "";  // untranslated
Blockly.Msg.PAUSE_TIMER = "pause timer";  // untranslated
Blockly.Msg.PAUSE_TIMER_TOOLTIP = "Pauses the timer and all events in the queue";  // untranslated
Blockly.Msg.PAUSE_TIMER_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#pause";  // untranslated
Blockly.Msg.PHASER_EASING_TOOLTIP = "Prebuilt easing functions you can utilize through out your code";  // untranslated
Blockly.Msg.PHASER_EASING_URL = "http://dragondrop.digipen.edu/docs/Phaser.Easing.html";  // untranslated
Blockly.Msg.PHASER_GAME_ADD_TWEEN_FROM_TITLE = "create tween from";  // untranslated
Blockly.Msg.PHASER_GAME_ADD_TWEEN_FROM_TOOLTIP = "Create a tween from the end value to the current values, setting the values to end first";  // untranslated
Blockly.Msg.PHASER_GAME_ADD_TWEEN_FROM_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#from";  // untranslated
Blockly.Msg.PHASER_GAME_ADD_TWEEN_TO_TITLE = "create tween to";  // untranslated
Blockly.Msg.PHASER_GAME_ADD_TWEEN_TO_TOOLTIP = "Create a tween from the current value to the end values";  // untranslated
Blockly.Msg.PHASER_GAME_ADD_TWEEN_TO_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#to";  // untranslated
Blockly.Msg.PHASER_PAUSE_TWEEN = "pause tween";  // untranslated
Blockly.Msg.PHASER_PAUSE_TWEEN_TOOLTIP = "pause the tween dispatching onComplete if complete is checked";  // untranslated
Blockly.Msg.PHASER_PAUSE_TWEEN_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#pause";  // untranslated
Blockly.Msg.PHASER_RESUME_TWEEN = "resume tween";  // untranslated
Blockly.Msg.PHASER_RESUME_TWEEN_TOOLTIP = "resume the tween dispatching onComplete if complete is checked";  // untranslated
Blockly.Msg.PHASER_RESUME_TWEEN_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#resume";  // untranslated
Blockly.Msg.PHASER_SIMPLE_INIT = "run phaser";  // untranslated
Blockly.Msg.PHASER_SIMPLE_INIT_CREATE = "on create do";  // untranslated
Blockly.Msg.PHASER_SIMPLE_INIT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html";  // untranslated
Blockly.Msg.PHASER_SIMPLE_INIT_PRELOAD = "on preload do";  // untranslated
Blockly.Msg.PHASER_SIMPLE_INIT_TOOLTIP = "Create a Phaser Game with given width and height.";  // untranslated
Blockly.Msg.PHASER_SIMPLE_INIT_UPDATE = "on update do";  // untranslated
Blockly.Msg.PHASER_START_TWEEN = "start tween";  // untranslated
Blockly.Msg.PHASER_START_TWEEN_TOOLTIP = "start the tween dispatching onComplete if complete is checked";  // untranslated
Blockly.Msg.PHASER_START_TWEEN_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#start";  // untranslated
Blockly.Msg.PHASER_STOP_TWEEN = "stop tween";  // untranslated
Blockly.Msg.PHASER_STOP_TWEEN_COMPLETE = "fire onComplete";  // untranslated
Blockly.Msg.PHASER_STOP_TWEEN_TOOLTIP = "Stop the tween dispatching onComplete if complete is checked";  // untranslated
Blockly.Msg.PHASER_STOP_TWEEN_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#stop";  // untranslated
Blockly.Msg.PHASER_TWEEN_AUTO_START = "auto start";  // untranslated
Blockly.Msg.PHASER_TWEEN_DELAY = "delay";  // untranslated
Blockly.Msg.PHASER_TWEEN_DURATION = "duration";  // untranslated
Blockly.Msg.PHASER_TWEEN_EASE = "ease";  // untranslated
Blockly.Msg.PHASER_TWEEN_MUTATORARG_TITLE = "property";  // untranslated
Blockly.Msg.PHASER_TWEEN_MUTATORARG_TOOLTIP = "Property to tween on the target object";  // untranslated
Blockly.Msg.PHASER_TWEEN_MUTATORCONTAINER_TITLE = "properties";  // untranslated
Blockly.Msg.PHASER_TWEEN_MUTATORCONTAINER_TOOLTIP = "List of properties to tween on the target object";  // untranslated
Blockly.Msg.PHASER_TWEEN_PROPERTIES_HEADER = "properties:";  // untranslated
Blockly.Msg.PHASER_TWEEN_REPEAT = "repeat";  // untranslated
Blockly.Msg.PHASER_TWEEN_TARGET = "target";  // untranslated
Blockly.Msg.PHASER_TWEEN_YOYO = "yoyo";  // untranslated
Blockly.Msg.PHASER_YOYO_CHILD_TWEEN_INDEX = "child index";  // untranslated
Blockly.Msg.PHASER_YOYO_TWEEN = "yoyo tween";  // untranslated
Blockly.Msg.PHASER_YOYO_TWEEN_DELAY = "delay";  // untranslated
Blockly.Msg.PHASER_YOYO_TWEEN_TOOLTIP = "enable or disable yoyoing for this tween";  // untranslated
Blockly.Msg.PHASER_YOYO_TWEEN_URL = "http://dragondrop.digipen.edu/docs/Phaser.Tween.html#yoyo";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_LOCATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#accelerateToXY";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_LOCATION_TOOLTIP = "Sets the acceleration.x/y property on the object so it will move towards the x/y coordinates at the given speed. The object will not continuously track the target, or stop moving when it reaches the destination.";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_OBJECT = "pixels/second with max velocity";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_OBJECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#accelerateToObject";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_OBJECT_TOOLTIP = "Sets the acceleration.x/y property on the object so it will move towards the target at the given speed. The object will not continuously track the target, or stop moving when it reaches the destination.";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_POINTER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#accelerateToPointer";  // untranslated
Blockly.Msg.PHYSICS_ACCELERATE_TO_POINTER_TOOLTIP = "Sets the acceleration.x/y property on the object so it will move towards the pointer at the given speed. The object will not continuously track the target, or stop moving when it reaches the destination.";  // untranslated
Blockly.Msg.PHYSICS_CLOSEST = "object closest to";  // untranslated
Blockly.Msg.PHYSICS_CLOSEST_HELP_URL = "";  // untranslated
Blockly.Msg.PHYSICS_CLOSEST_TOOLTIP = "";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_BETWEEN = "distance between";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_BETWEEN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#distanceBetween";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_BETWEEN_TOOLTIP = "Find the distance between two display objects (like Sprites).";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_TO_LOCATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#distanceToXY";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_TO_LOCATION_TOOLTIP = "Find the distance between the object and an (x,y) location.";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_TO_POINTER = "and pointer";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_TO_POINTER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#distanceToPointer";  // untranslated
Blockly.Msg.PHYSICS_DISTANCE_TO_POINTER_TOOLTIP = "Find the distance between the object and a Pointer.";  // untranslated
Blockly.Msg.PHYSICS_FARTHEST = "object farthest from";  // untranslated
Blockly.Msg.PHYSICS_FARTHEST_HELP_URL = "";  // untranslated
Blockly.Msg.PHYSICS_FARTHEST_TOOLTIP = "";  // untranslated
Blockly.Msg.PHYSICS_INTERSECTS = "intersects with";  // untranslated
Blockly.Msg.PHYSICS_INTERSECTS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#intersects";  // untranslated
Blockly.Msg.PHYSICS_INTERSECTS_TOOLTIP = "Check for intersection against two bodies and returns true or false.";  // untranslated
Blockly.Msg.PHYSICS_MOVE_TO_LOCATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#moveToXY";  // untranslated
Blockly.Msg.PHYSICS_MOVE_TO_LOCATION_TOOLTIP = "Move the given display object towards the x/y coordinates at a steady velocity.";  // untranslated
Blockly.Msg.PHYSICS_MOVE_TO_POINTER = "to pointer";  // untranslated
Blockly.Msg.PHYSICS_MOVE_TO_POINTER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html#moveToPointer";  // untranslated
Blockly.Msg.PHYSICS_MOVE_TO_POINTER_TOOLTIP = "Move the given display object towards the pointer at a steady velocity.";  // untranslated
Blockly.Msg.PIN = "pin";  // untranslated
Blockly.Msg.PININPUT = "set pin # ";  // untranslated
Blockly.Msg.PININPUT_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.PININPUT_MODE_DROPDOWN_INPUT = "input";  // untranslated
Blockly.Msg.PININPUT_MODE_DROPDOWN_INPUT_PULLUP = "input_pullup";  // untranslated
Blockly.Msg.PININPUT_MODE_DROPDOWN_OUTPUT = "output";  // untranslated
Blockly.Msg.PININPUT_TOOLTIP = "";  // untranslated
Blockly.Msg.PIXELS = "pixels";  // untranslated
Blockly.Msg.PIXELS_PER_SECOND = "pixels per second";  // untranslated
Blockly.Msg.PIXELS_PER_SECOND_SQUARED = "pixels per second squared";  // untranslated
Blockly.Msg.PLATFORMER = "platformer";  // untranslated
Blockly.Msg.PLAY_ACK = "play acknowledgment chirp";  // untranslated
Blockly.Msg.PLAY_ACK_TOOLTIP = "";  // untranslated
Blockly.Msg.PLAY_ANGER = "player anger";  // untranslated
Blockly.Msg.PLAY_ANGER_TOOLTIP = "";  // untranslated
Blockly.Msg.PLAY_ANIMATION = "play animation";  // untranslated
Blockly.Msg.PLAY_ANIMATION_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.AnimationManager.html#play";  // untranslated
Blockly.Msg.PLAY_ANIMATION_TOOLTIP = "Starts playing an animation on the given sprite.";  // untranslated
Blockly.Msg.PLAY_ANIMATION_VI = "play animation";  // untranslated
Blockly.Msg.PLAY_ANIMATION_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#play";  // untranslated
Blockly.Msg.PLAY_ANIMATION_VI_TOOLTIP = "Plays an animation on the given sprite.";  // untranslated
Blockly.Msg.PLAY_BOREDOM = "play boredom";  // untranslated
Blockly.Msg.PLAY_BOREDOM_TOOLTIP = "";  // untranslated
Blockly.Msg.PLAY_CHIRP = "play chirp";  // untranslated
Blockly.Msg.PLAY_CHIRP_FREQUENCY = "with frequency";  // untranslated
Blockly.Msg.PLAY_CHIRP_TOOLTIP = "";  // untranslated
Blockly.Msg.PLAY_EXCITED = "play excited";  // untranslated
Blockly.Msg.PLAY_EXCITED_TOOLTIP = "";  // untranslated
Blockly.Msg.PLAY_NON_ACK = "play non-acknowledgment chirp";  // untranslated
Blockly.Msg.PLAY_NON_ACK_TOOLTIP = "";  // untranslated
Blockly.Msg.PLAY_SOUND = "play sound";  // untranslated
Blockly.Msg.PLAY_SOUND_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.SoundManager.html#play";  // untranslated
Blockly.Msg.PLAY_SOUND_TOOLTIP = "Plays a sound that has been created. The volume goes from 0 to 1.";  // untranslated
Blockly.Msg.PLAY_START_CHIRP = "play start chirp";  // untranslated
Blockly.Msg.PLAY_START_CHIRP_TOOLTIP = "";  // untranslated
Blockly.Msg.POINTS_ADD = "add points";  // untranslated
Blockly.Msg.POINTS_ADD_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Point.html#.add";  // untranslated
Blockly.Msg.POINTS_ADD_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#add";  // untranslated
Blockly.Msg.POINTS_ADD_MEMBER_TOOLTIP = "Adds the given x and y values to this Point.";  // untranslated
Blockly.Msg.POINTS_ADD_TOOLTIP = "Adds the two points and returns the result";  // untranslated
Blockly.Msg.POINTS_ANGLE_BETWEEN = "angle between";  // untranslated
Blockly.Msg.POINTS_ANGLE_BETWEEN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.angle";  // untranslated
Blockly.Msg.POINTS_ANGLE_BETWEEN_TOOLTIP = "Returns the angle in radians between the two point objects";  // untranslated
Blockly.Msg.POINTS_CEIL = "ceiling";  // untranslated
Blockly.Msg.POINTS_CEIL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#ceil";  // untranslated
Blockly.Msg.POINTS_CEIL_TOOLTIP = "Convert the x and y values to their ceiling values.";  // untranslated
Blockly.Msg.POINTS_CENTROID = "get centroid of";  // untranslated
Blockly.Msg.POINTS_CENTROID_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#_centroid";  // untranslated
Blockly.Msg.POINTS_CENTROID_TOOLTIP = "Calculates centroid (or midpoint) from an array of points. If only one point is provided, that point is returned.";  // untranslated
Blockly.Msg.POINTS_CLAMP = "clamp";  // untranslated
Blockly.Msg.POINTS_CLAMP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#clamp";  // untranslated
Blockly.Msg.POINTS_CLAMP_TOOLTIP = "Clamps this Point object values to be between the given min and max.";  // untranslated
Blockly.Msg.POINTS_CLAMP_X = "clamp the x value of";  // untranslated
Blockly.Msg.POINTS_CLAMP_X_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#clampX";  // untranslated
Blockly.Msg.POINTS_CLAMP_X_TOOLTIP = "Clamps the x value of this Point to be between the given min and max.";  // untranslated
Blockly.Msg.POINTS_CLAMP_Y = "clamp the y value of";  // untranslated
Blockly.Msg.POINTS_CLAMP_Y_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#clampY";  // untranslated
Blockly.Msg.POINTS_CLAMP_Y_TOOLTIP = "Clamps the y value of this Point to be between the given min and max.";  // untranslated
Blockly.Msg.POINTS_CLONE = "create clone of";  // untranslated
Blockly.Msg.POINTS_CLONE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#clone";  // untranslated
Blockly.Msg.POINTS_CLONE_TOOLTIP = "Creates a copy of the given Point.";  // untranslated
Blockly.Msg.POINTS_COPY_FROM = "copy values from";  // untranslated
Blockly.Msg.POINTS_COPY_FROM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#copyFrom";  // untranslated
Blockly.Msg.POINTS_COPY_FROM_TOOLTIP = "Copies the x and y properties from one object to a Point.";  // untranslated
Blockly.Msg.POINTS_CROSS = "cross product of";  // untranslated
Blockly.Msg.POINTS_CROSS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#cross";  // untranslated
Blockly.Msg.POINTS_CROSS_TOOLTIP = "he cross product of two Point objects";  // untranslated
Blockly.Msg.POINTS_DISTANCE = "distance between";  // untranslated
Blockly.Msg.POINTS_DISTANCE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.distance";  // untranslated
Blockly.Msg.POINTS_DISTANCE_TOOLTIP = "Returns the distance between the two point objects";  // untranslated
Blockly.Msg.POINTS_DIVIDE = "divide";  // untranslated
Blockly.Msg.POINTS_DIVIDE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.divide";  // untranslated
Blockly.Msg.POINTS_DIVIDE_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#divide";  // untranslated
Blockly.Msg.POINTS_DIVIDE_MEMBER_TOOLTIP = "Divides Point.x and Point.y by the given x and y values.";  // untranslated
Blockly.Msg.POINTS_DIVIDE_TOOLTIP = "Returns a new point p = [a.x / b.x, a.y / b.y]";  // untranslated
Blockly.Msg.POINTS_DOT = "dot product of";  // untranslated
Blockly.Msg.POINTS_DOT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#dot";  // untranslated
Blockly.Msg.POINTS_DOT_TOOLTIP = "The dot product of two Point objects.";  // untranslated
Blockly.Msg.POINTS_EQUALS = "is equal to";  // untranslated
Blockly.Msg.POINTS_EQUALS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.equals";  // untranslated
Blockly.Msg.POINTS_EQUALS_TOOLTIP = "Determines if two points are equal";  // untranslated
Blockly.Msg.POINTS_FLOOR = "floor";  // untranslated
Blockly.Msg.POINTS_FLOOR_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#floor";  // untranslated
Blockly.Msg.POINTS_FLOOR_TOOLTIP = "Convert the x and y values to their floor values.";  // untranslated
Blockly.Msg.POINTS_GET_MAGNITUDE = "get magnitude of";  // untranslated
Blockly.Msg.POINTS_GET_MAGNITUDE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#getMagnitude";  // untranslated
Blockly.Msg.POINTS_GET_MAGNITUDE_SQUARED = "get magnitude squared of";  // untranslated
Blockly.Msg.POINTS_GET_MAGNITUDE_SQUARED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#getMagnitudeSq";  // untranslated
Blockly.Msg.POINTS_GET_MAGNITUDE_SQUARED_TOOLTIP = "Calculates the length squared of the Point object.";  // untranslated
Blockly.Msg.POINTS_GET_MAGNITUDE_TOOLTIP = "Calculates the length of the Point object.";  // untranslated
Blockly.Msg.POINTS_INTERPOLATE = "interpolate between A";  // untranslated
Blockly.Msg.POINTS_INTERPOLATE_B = "and B";  // untranslated
Blockly.Msg.POINTS_INTERPOLATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.interpolate";  // untranslated
Blockly.Msg.POINTS_INTERPOLATE_PERCENT = "percent to B";  // untranslated
Blockly.Msg.POINTS_INTERPOLATE_TOOLTIP = "Interpolate between two points, the percent (0.0 - 1.0) determines how far towards the second point (1 - F) * A + F * B";  // untranslated
Blockly.Msg.POINTS_INVERT = "invert x and y of";  // untranslated
Blockly.Msg.POINTS_INVERT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#invert";  // untranslated
Blockly.Msg.POINTS_INVERT_TOOLTIP = "Inverts the x and y values of this Point.";  // untranslated
Blockly.Msg.POINTS_IS_ZERO = "is at (0,0)?";  // untranslated
Blockly.Msg.POINTS_IS_ZERO_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#isZero";  // untranslated
Blockly.Msg.POINTS_IS_ZERO_TOOLTIP = "Determine if this point is at 0,0 and return true or false.";  // untranslated
Blockly.Msg.POINTS_LIMIT = "limit magnitude of";  // untranslated
Blockly.Msg.POINTS_LIMIT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#limit";  // untranslated
Blockly.Msg.POINTS_LIMIT_TOOLTIP = "Alters the Point object so it's magnitude is at most the max value.";  // untranslated
Blockly.Msg.POINTS_MULTIPLY = "multiply";  // untranslated
Blockly.Msg.POINTS_MULTIPLY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.multiply";  // untranslated
Blockly.Msg.POINTS_MULTIPLY_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#multiply";  // untranslated
Blockly.Msg.POINTS_MULTIPLY_MEMBER_TOOLTIP = "Multiplies Point.x and Point.y by the given x and y values.";  // untranslated
Blockly.Msg.POINTS_MULTIPLY_TOOLTIP = "Multiply two points";  // untranslated
Blockly.Msg.POINTS_NEGATE = "negate";  // untranslated
Blockly.Msg.POINTS_NEGATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.negative";  // untranslated
Blockly.Msg.POINTS_NEGATE_TOOLTIP = "Negate the point";  // untranslated
Blockly.Msg.POINTS_NORMALIZE = "normalize";  // untranslated
Blockly.Msg.POINTS_NORMALIZE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.normalize";  // untranslated
Blockly.Msg.POINTS_NORMALIZE_TOOLTIP = "Normalize the point (make unit length)";  // untranslated
Blockly.Msg.POINTS_PERPENDICULAR = "find pependicular vector to";  // untranslated
Blockly.Msg.POINTS_PERPENDICULAR_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#.perp";  // untranslated
Blockly.Msg.POINTS_PERPENDICULAR_TOOLTIP = "Find a perpendicular vector to this point";  // untranslated
Blockly.Msg.POINTS_SET_TO_POLAR = "to polar with";  // untranslated
Blockly.Msg.POINTS_SET_TO_POLAR_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#setToPolar";  // untranslated
Blockly.Msg.POINTS_SET_TO_POLAR_POINT = "convert values of";  // untranslated
Blockly.Msg.POINTS_SET_TO_POLAR_TOOLTIP = "Sets the x and y values of this Point object from a given polar coordinate.";  // untranslated
Blockly.Msg.POINTS_SUBTRACT = "subtract points";  // untranslated
Blockly.Msg.POINTS_SUBTRACT_HELP_URL = "https://photonstorm.github.io/phaser-ce/Phaser.Point.html#.subtract";  // untranslated
Blockly.Msg.POINTS_SUBTRACT_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#subtract";  // untranslated
Blockly.Msg.POINTS_SUBTRACT_MEMBER_TOOLTIP = "Subtracts the given x and y values from this Point.";  // untranslated
Blockly.Msg.POINTS_SUBTRACT_TOOLTIP = "Adds the two points and returns the result";  // untranslated
Blockly.Msg.POINT_CREATE = "make point";  // untranslated
Blockly.Msg.POINT_CREATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html";  // untranslated
Blockly.Msg.POINT_CREATE_TOOLTIP = "Defines a point which represents a location in 2D";  // untranslated
Blockly.Msg.POINT_GET_ELEMENT = "get point";  // untranslated
Blockly.Msg.POINT_GET_ELEMENT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html";  // untranslated
Blockly.Msg.POINT_GET_ELEMENT_TOOLTIP = "Defines a point which represents a location in 2D";  // untranslated
Blockly.Msg.POINT_SET_ELEMENT = "set point";  // untranslated
Blockly.Msg.POINT_SET_ELEMENT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html";  // untranslated
Blockly.Msg.POINT_SET_ELEMENT_TOOLTIP = "Defines a point which represents a location in 2D";  // untranslated
Blockly.Msg.POINT_SET_MAGNITUDE = "set magnitude for";  // untranslated
Blockly.Msg.POINT_SET_MAGNITUDE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Point.html#setMagnitude";  // untranslated
Blockly.Msg.POINT_SET_MAGNITUDE_TOOLTIP = "Sets the magnitude of the point";  // untranslated
Blockly.Msg.PRESENT_HEADING = "get present heading";  // untranslated
Blockly.Msg.PRESENT_HEADING_TOOLTIP = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "dovoli korake";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "s/z:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Izvede uporabniško funkcijo '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Izvede uporabniško funkcijo '%1' in uporabi njen izhod.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "s/z:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Ustvari '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Opišite funkcijo ...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "nekaj";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "izvedi";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Ustvari funkcijo brez izhoda.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "vrni";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Ustvari funkcijo z izhodom.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Pozor: Ta funkcija ima podvojene parametre.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Označi definicijo funkcije";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Če je vrednost resnična, vrne drugo vrednost.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Pozor: To kocko lahko uporabiš samo znotraj definicije funkcije.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "ime vnosa:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Funkciji doda vnos.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "vnosi";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Doda, odstrani ali spremeni vrstni red vnosov te funkcije.";
Blockly.Msg.QUARTER = "quarter of a second";  // untranslated
Blockly.Msg.QUESTION = "?";  // untranslated
Blockly.Msg.RADIANS = "radians";  // untranslated
Blockly.Msg.RADIUS = "radius";  // untranslated
Blockly.Msg.RANDOM = "Random value between";  // untranslated
Blockly.Msg.RANDOM_ANGLE = "get random angle";  // untranslated
Blockly.Msg.RANDOM_ANGLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.RandomDataGenerator.html#angle";  // untranslated
Blockly.Msg.RANDOM_ANGLE_TOOLTIP = "Returns a random angle between -180 and 180.";  // untranslated
Blockly.Msg.RANDOM_BOOLEAN = "random boolean";  // untranslated
Blockly.Msg.RANDOM_BOOLEAN_TOOLTIP = "generates either true or false";  // untranslated
Blockly.Msg.RANDOM_EYES = "set eyes to a random colour";  // untranslated
Blockly.Msg.RANDOM_EYES_TOOLTIP = "";  // untranslated
Blockly.Msg.RANDOM_HELP_URL = "https://www.arduino.cc/en/Reference/Random";  // untranslated
Blockly.Msg.RANDOM_PICK = "get random item from list";  // untranslated
Blockly.Msg.RANDOM_PICK_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.RandomDataGenerator.html#pick";  // untranslated
Blockly.Msg.RANDOM_PICK_TOOLTIP = "Returns a random member in a given list.";  // untranslated
Blockly.Msg.RANDOM_PICK_WEIGHTED = "get random item from list (weighted)";  // untranslated
Blockly.Msg.RANDOM_PICK_WEIGHTED_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.RandomDataGenerator.html#weightedPick";  // untranslated
Blockly.Msg.RANDOM_PICK_WEIGHTED_TOOLTIP = "Returns a random member in a given list. This version chooses items close to the start of the list more frequently.";  // untranslated
Blockly.Msg.RANDOM_REAL = "get random number";  // untranslated
Blockly.Msg.RANDOM_REAL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.RandomDataGenerator.html#real";  // untranslated
Blockly.Msg.RANDOM_REAL_IN_RANGE = "get random number between";  // untranslated
Blockly.Msg.RANDOM_REAL_IN_RANGE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.RandomDataGenerator.html#realInRange";  // untranslated
Blockly.Msg.RANDOM_REAL_IN_RANGE_TOOLTIP = "Returns a random real number in the specified range.";  // untranslated
Blockly.Msg.RANDOM_REAL_TOOLTIP = "Returns a random real number. This can be anywhere between 0 and 2^32 (about 4 billion).";  // untranslated
Blockly.Msg.RANDOM_SEED = "Randomize seed with value";  // untranslated
Blockly.Msg.RANDOM_SEED_HELP_URL = "https://www.arduino.cc/en/Reference/RandomSeed";  // untranslated
Blockly.Msg.RANDOM_SEED_TOOLTIP = "";  // untranslated
Blockly.Msg.RANDOM_SIGN = "get random sign";  // untranslated
Blockly.Msg.RANDOM_SIGN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.RandomDataGenerator.html#sign";  // untranslated
Blockly.Msg.RANDOM_SIGN_TOOLTIP = "Returns either +1 or -1. For deciding if something needs to be positive or negative.";  // untranslated
Blockly.Msg.RANDOM_TOOLTIP = "";  // untranslated
Blockly.Msg.RATE = "rate";  // untranslated
Blockly.Msg.READSENSOR = "read";  // untranslated
Blockly.Msg.READSENSOR_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.READSENSOR_LIGHT_DROPDOWN_AMBIENT_CENTER = "ambient sensor center";  // untranslated
Blockly.Msg.READSENSOR_LIGHT_DROPDOWN_AMBIENT_RIGHT = "ambient sensor right";  // untranslated
Blockly.Msg.READSENSOR_LIGHT_DROPDOWN_LINE_LEFT = "line sensor left";  // untranslated
Blockly.Msg.READSENSOR_LIGHT_DROPDOWN_LINE_RIGHT = "line sensor right";  // untranslated
Blockly.Msg.READSENSOR_TOOLTIP = "";  // untranslated
Blockly.Msg.READ_EDGE_LIGHT_SENSORS = "read edge light sensors using";  // untranslated
Blockly.Msg.READ_EDGE_LIGHT_SENSORS_AVERAGE = "average values";  // untranslated
Blockly.Msg.READ_EDGE_LIGHT_SENSORS_TOOLTIP = "Averages several reads and outputs to LeftEdgeSensorValue, etc.";  // untranslated
Blockly.Msg.READ_LEFT_LIGHT_SENSOR = "read left light sensor";  // untranslated
Blockly.Msg.READ_LEFT_LIGHT_SENSOR_TOOLTIP = "Return the reading of the left light sensor";  // untranslated
Blockly.Msg.READ_RIGHT_LIGHT_SENSOR = "read right light sensor";  // untranslated
Blockly.Msg.READ_RIGHT_LIGHT_SENSOR_TOOLTIP = "Return the reading of the right light sensor";  // untranslated
Blockly.Msg.READ_SIDE_SENSORS = "read side sensors";  // untranslated
Blockly.Msg.READ_SIDE_SENSORS_TOOLTIP = "Single relative & ambient reading from each of the 3 side sensors (pauses and/or repeats if IRReceiving).";  // untranslated
Blockly.Msg.RECTANGLE_CLONE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#clone";  // untranslated
Blockly.Msg.RECTANGLE_CLONE_TOOLTIP = "Returns a new Rectangle object with the same values for the x, y, width, and height properties as the original Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#_contains";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_POINT = "contains point";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_POINT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#_containsPoint";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_POINT_TOOLTIP = "Determines whether the specified point is contained within the rectangular region defined by this Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_RECT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#_containsRect";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_RECT_TOOLTIP = "Determines whether the first Rectangle object is fully contained within the second Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_CONTAINS_TOOLTIP = "Determines whether the specified coordinates are contained within the region defined by this Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_CREATE = "make rectangle";  // untranslated
Blockly.Msg.RECTANGLE_CREATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html";  // untranslated
Blockly.Msg.RECTANGLE_CREATE_TOOLTIP = "Defines a rectangle, can be used for cropping, alignment and other tasks";  // untranslated
Blockly.Msg.RECTANGLE_GET_NUMERIC_FIELDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#toc-3";  // untranslated
Blockly.Msg.RECTANGLE_GET_NUMERIC_FIELDS_TOOLTIP = "Get numeric fields of a Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_GET_POINT_FIELDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#toc-3";  // untranslated
Blockly.Msg.RECTANGLE_GET_POINT_FIELDS_TOOLTIP = "Get point fields of a Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_RANDOM = "random point in";  // untranslated
Blockly.Msg.RECTANGLE_RANDOM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Rectangle.html#random";  // untranslated
Blockly.Msg.RECTANGLE_RANDOM_TOOLTIP = "Returns a uniformly distributed random point from anywhere within this Rectangle.";  // untranslated
Blockly.Msg.RECTANGLE_SET_NUMERIC_FIELDS_TOOLTIP = "Set numeric fields of a Rectangle object.";  // untranslated
Blockly.Msg.RECTANGLE_SET_POINT_FIELDS_TOOLTIP = "Set point fields of a Rectangle object.";  // untranslated
Blockly.Msg.RED = "red";  // untranslated
Blockly.Msg.REDO = "Ponovi";
Blockly.Msg.REFRESH_FRAME = "refresh frame of ";  // untranslated
Blockly.Msg.REFRESH_FRAME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#refreshFrame";  // untranslated
Blockly.Msg.REFRESH_FRAME_TOOLTIP = "Refreshes the current frame data back to the parent Sprite and also resets the texture data.";  // untranslated
Blockly.Msg.REFRESH_PIXELS = "refresh pixels";  // untranslated
Blockly.Msg.REFRESH_PIXELS_TOOLTIP = "";  // untranslated
Blockly.Msg.REMOVE = "remove";  // untranslated
Blockly.Msg.REMOVE_CHILD = "remove child";  // untranslated
Blockly.Msg.REMOVE_CHILDREN = "remove all children from";  // untranslated
Blockly.Msg.REMOVE_CHILDREN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#removeChildren";  // untranslated
Blockly.Msg.REMOVE_CHILDREN_TOOLTIP = "Removes all children from the parent. They will all stop moving together.";  // untranslated
Blockly.Msg.REMOVE_CHILDREN_VI = "remove all children from";  // untranslated
Blockly.Msg.REMOVE_CHILDREN_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#removeChildren";  // untranslated
Blockly.Msg.REMOVE_CHILDREN_VI_TOOLTIP = "Removes all children from the parent. They will all stop moving together.";  // untranslated
Blockly.Msg.REMOVE_CHILD_AT = "remove the child at index";  // untranslated
Blockly.Msg.REMOVE_CHILD_AT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#removeChildAt";  // untranslated
Blockly.Msg.REMOVE_CHILD_AT_TOOLTIP = "Finds the child at the given index and removes it from its parent. It will no longer move with the parent.";  // untranslated
Blockly.Msg.REMOVE_CHILD_AT_VI = "remove the child at index";  // untranslated
Blockly.Msg.REMOVE_CHILD_AT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#removeChildAt";  // untranslated
Blockly.Msg.REMOVE_CHILD_AT_VI_TOOLTIP = "Finds the child at the given index and removes it from its parent. It will no longer move with the parent.";  // untranslated
Blockly.Msg.REMOVE_CHILD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#removeChild";  // untranslated
Blockly.Msg.REMOVE_CHILD_TOOLTIP = "Makes this sprite/image stop being a child and moving with its parent.";  // untranslated
Blockly.Msg.REMOVE_CHILD_VI = "remove child";  // untranslated
Blockly.Msg.REMOVE_CHILD_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#removeChild";  // untranslated
Blockly.Msg.REMOVE_CHILD_VI_TOOLTIP = "Makes this sprite/image stop being a child and moving with its parent.";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Odstrani komentar";
Blockly.Msg.REMOVE_FROM_GROUP = "from group";  // untranslated
Blockly.Msg.REMOVE_FROM_GROUP_DESTROY = "destroy it too";  // untranslated
Blockly.Msg.REMOVE_FROM_GROUP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Group.html#remove";  // untranslated
Blockly.Msg.REMOVE_FROM_GROUP_TOOLTIP = "Removes an object from a group. Optionally, destroy it as well.";  // untranslated
Blockly.Msg.REMOVE_SOUND = "stop all sounds tagged";  // untranslated
Blockly.Msg.REMOVE_SOUND_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.SoundManager.html#removeByKey";  // untranslated
Blockly.Msg.REMOVE_SOUND_TOOLTIP = "Stops all sounds with the given tag.";  // untranslated
Blockly.Msg.RENAME_VARIABLE = "Preimenuj spremenljivko...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Preimenuj vse spremenljivke '%1' v:";
Blockly.Msg.RESET = "reset";  // untranslated
Blockly.Msg.RESET_FRAME = "reset the frame dimensions of";  // untranslated
Blockly.Msg.RESET_FRAME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#resetFrame";  // untranslated
Blockly.Msg.RESET_FRAME_TOOLTIP = "Resets the texture frame dimensions that the sprite uses for rendering.";  // untranslated
Blockly.Msg.RESET_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#reset";  // untranslated
Blockly.Msg.RESET_LOOK_AT_EDGE = "reset look at edge";  // untranslated
Blockly.Msg.RESET_LOOK_AT_EDGE_TOOLTIP = "Zeros the LookAtEdge() running average";  // untranslated
Blockly.Msg.RESET_TOOLTIP = "Gets most objects ready to play again in various ways and treats it like new. Specifically, moves it to a new position then makes sure it is visible, rendering, alive, and actually exists in the game world.";  // untranslated
Blockly.Msg.RESIZE_FRAME = "resize the frame of";  // untranslated
Blockly.Msg.RESIZE_FRAME_ACCOMODATE = "to accomodate";  // untranslated
Blockly.Msg.RESIZE_FRAME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#resizeFrame";  // untranslated
Blockly.Msg.RESIZE_FRAME_TOOLTIP = "Resizes the Frame dimensions that the Game Object uses for rendering. You shouldn't normally need to ever call this, but in the case of special texture types such as Video or BitmapData it can be useful to adjust the dimensions directly in this way.";  // untranslated
Blockly.Msg.RESTART = "restart";  // untranslated
Blockly.Msg.RESTART_IR = "restart IR";  // untranslated
Blockly.Msg.RESTART_IR_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.RESTART_IR_TOOLTIP = "Start listening for IR should be setup and in loop after processing an input";  // untranslated
Blockly.Msg.RESUME_NAVIGATION = "resume navigation";  // untranslated
Blockly.Msg.RESUME_NAVIGATION_TOOLTIP = "";  // untranslated
Blockly.Msg.RESUME_TIMER = "resume timer";  // untranslated
Blockly.Msg.RESUME_TIMER_TOOLTIP = "Resumes the timer and all events in the queue";  // untranslated
Blockly.Msg.RESUME_TIMER_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#resume";  // untranslated
Blockly.Msg.REVIVE = "revive";  // untranslated
Blockly.Msg.REVIVE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#revive";  // untranslated
Blockly.Msg.REVIVE_TOOLTIP = "Brings a 'dead' Game Object back to life. Makes sure it counts as alive, existing, and visible. Will send an event named onRevived.";  // untranslated
Blockly.Msg.RIGHT = "right";  // untranslated
Blockly.Msg.RIGHTPREVCOLOUR = "right previous color";  // untranslated
Blockly.Msg.RIGHTPREVCOLOUR_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.RIGHTPREVCOLOUR_TOOLTIP = "";  // untranslated
Blockly.Msg.RIGHT_CENTER = "right center";  // untranslated
Blockly.Msg.RIGHT_EYE = "right eye";  // untranslated
Blockly.Msg.ROTATE = "rotate";  // untranslated
Blockly.Msg.ROTATE_ACCURATE_TOOLTIP = "Rotate ringo the given degrees within the maximum time.";  // untranslated
Blockly.Msg.ROTATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#angle";  // untranslated
Blockly.Msg.ROTATE_TOOLTIP = "Rotates a game object by the given angle in degrees. Negative numbers will rotate it the opposite direction.";  // untranslated
Blockly.Msg.ROTATIONDEGREES = "rotation (degrees)";  // untranslated
Blockly.Msg.SECOND = "one second";  // untranslated
Blockly.Msg.SECONDS = "seconds";  // untranslated
Blockly.Msg.SECONDS_SINCE_START_TOOLTIP = "Gets the number of seconds since start of the program.";  // untranslated
Blockly.Msg.SEND = "send";  // untranslated
Blockly.Msg.SEND_TO_BACK = "to the back";  // untranslated
Blockly.Msg.SEND_TO_BACK_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#sendToBack";  // untranslated
Blockly.Msg.SEND_TO_BACK_TOOLTIP = "Sends this sprite/image to the back of the display order. In case of overlapping sprites, it will draw behind everything else.";  // untranslated
Blockly.Msg.SENSOR_LINE_AVOID_TOOLTIP = "Wink robot will avoid black lines. For best results, use solid lines at least 1/2cm thick or more on white paper.";  // untranslated
Blockly.Msg.SENSOR_LINE_FOLLOW_TOOLTIP = "Wink robot will follow a black line. For best results, use a solid dark line 3/4cm - 1cm thick on white paper.";  // untranslated
Blockly.Msg.SENSOR_OBSTACLE_APPROACH_TOOLTIP = "Wink robot approaches an obstacle placed in front of it then moved.";  // untranslated
Blockly.Msg.SENSOR_OBSTACLE_AVOID_TOOLTIP = "Wink robot travels around and attempts to avoid obstacles in front of it.";  // untranslated
Blockly.Msg.SERIAL_BEGIN = "serial begin at ";  // untranslated
Blockly.Msg.SERIAL_BEGIN_HELP_URL = "";  // untranslated
Blockly.Msg.SERIAL_BEGIN_SPEED = "bits per second (baud)";  // untranslated
Blockly.Msg.SERIAL_BEGIN_TOOLTIP = "";  // untranslated
Blockly.Msg.SERIAL_END = "serial end";  // untranslated
Blockly.Msg.SERIAL_END_HELP_URL = "";  // untranslated
Blockly.Msg.SERIAL_END_TOOLTIP = "";  // untranslated
Blockly.Msg.SERIAL_PRINT = "serial print";  // untranslated
Blockly.Msg.SERIAL_PRINT_HELP_URL = "";  // untranslated
Blockly.Msg.SERIAL_PRINT_LINE = "serial print line";  // untranslated
Blockly.Msg.SERIAL_PRINT_LINE_HELP_URL = "";  // untranslated
Blockly.Msg.SERIAL_PRINT_LINE_TOOLTIP = "";  // untranslated
Blockly.Msg.SERIAL_PRINT_TOOLTIP = "";  // untranslated
Blockly.Msg.SERIAL_READ = "serial read first byte";  // untranslated
Blockly.Msg.SERIAL_READ_HELP_URL = "";  // untranslated
Blockly.Msg.SERIAL_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.SERVO_ATTACHED = "servo attached?";  // untranslated
Blockly.Msg.SERVO_ATTACHED_HELP_URL = "https://www.arduino.cc/en/Reference/ServoAttached";  // untranslated
Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_HELP_URL = "https://www.arduino.cc/en/Reference/ServoAttach";  // untranslated
Blockly.Msg.SERVO_ATTACH_PIN = "attach pin";  // untranslated
Blockly.Msg.SERVO_ATTACH_SERVO = "to servo";  // untranslated
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "";  // untranslated
Blockly.Msg.SERVO_CANNOT_BE_NULL = "servo field cannot be left empty";  // untranslated
Blockly.Msg.SERVO_DETACH = "detach servo";  // untranslated
Blockly.Msg.SERVO_DETACH_HELP_URL = "https://www.arduino.cc/en/Reference/ServoDetach";  // untranslated
Blockly.Msg.SERVO_DETACH_TOOLTIP = "";  // untranslated
Blockly.Msg.SERVO_READ = "read from servo";  // untranslated
Blockly.Msg.SERVO_READ_HELP_URL = "https://www.arduino.cc/en/Reference/ServoRead";  // untranslated
Blockly.Msg.SERVO_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.SERVO_WRITE_ANGLE = "set angle to";  // untranslated
Blockly.Msg.SERVO_WRITE_HELP_URL = "https://www.arduino.cc/en/Reference/ServoWrite";  // untranslated
Blockly.Msg.SERVO_WRITE_MICROSECONDS = "set microseconds to";  // untranslated
Blockly.Msg.SERVO_WRITE_MICROSECONDS_HELP_URL = "https://www.arduino.cc/en/Reference/ServoWriteMicroseconds";  // untranslated
Blockly.Msg.SERVO_WRITE_MICROSECONDS_SERVO = "on servo";  // untranslated
Blockly.Msg.SERVO_WRITE_MICROSECONDS_TOOLTIP = "";  // untranslated
Blockly.Msg.SERVO_WRITE_SERVO = "on servo";  // untranslated
Blockly.Msg.SERVO_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.SET = "set";  // untranslated
Blockly.Msg.SETEYESBLUE = "set eyes blue";  // untranslated
Blockly.Msg.SETEYESBLUE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESBLUE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESCYAN = "set eyes cyan";  // untranslated
Blockly.Msg.SETEYESCYAN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESCYAN_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESGREEN = "set eyes green";  // untranslated
Blockly.Msg.SETEYESGREEN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESGREEN_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESORANGE = "set eyes orange";  // untranslated
Blockly.Msg.SETEYESORANGE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESORANGE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESPINK = "set eyes pink";  // untranslated
Blockly.Msg.SETEYESPINK_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESPINK_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESPURPLE = "set eyes purple";  // untranslated
Blockly.Msg.SETEYESPURPLE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESPURPLE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESRED = "set eyes red";  // untranslated
Blockly.Msg.SETEYESRED_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESRED_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESRGB = "set eyes color";  // untranslated
Blockly.Msg.SETEYESRGB_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESRGB_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESWHITE = "set eyes white";  // untranslated
Blockly.Msg.SETEYESWHITE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESWHITE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETEYESYELLOW = "set eyes yellow";  // untranslated
Blockly.Msg.SETEYESYELLOW_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETEYESYELLOW_TOOLTIP = "";  // untranslated
Blockly.Msg.SETIRLIGHT_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETIRLIGHT_LIGHT_DROPDOWN_HEAD = "head light";  // untranslated
Blockly.Msg.SETIRLIGHT_LIGHT_DROPDOWN_LEFT_INNER = "line left inner";  // untranslated
Blockly.Msg.SETIRLIGHT_LIGHT_DROPDOWN_LEFT_OUTER = "line left outer";  // untranslated
Blockly.Msg.SETIRLIGHT_LIGHT_DROPDOWN_RIGHT_INNER = "line right inner";  // untranslated
Blockly.Msg.SETIRLIGHT_LIGHT_DROPDOWN_RIGHT_OUTER = "line right outer";  // untranslated
Blockly.Msg.SETIRLIGHT_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTBLUE = "set left blue";  // untranslated
Blockly.Msg.SETLEFTBLUE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTBLUE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTCYAN = "set left cyan";  // untranslated
Blockly.Msg.SETLEFTCYAN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTCYAN_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTGREEN = "set left green";  // untranslated
Blockly.Msg.SETLEFTGREEN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTGREEN_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTORANGE = "set left orange";  // untranslated
Blockly.Msg.SETLEFTORANGE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTORANGE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTPINK = "set left pink";  // untranslated
Blockly.Msg.SETLEFTPINK_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTPINK_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTPURPLE = "set left purple";  // untranslated
Blockly.Msg.SETLEFTPURPLE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTPURPLE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTRED = "set left red";  // untranslated
Blockly.Msg.SETLEFTRED_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTRED_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTRGB = "set left color";  // untranslated
Blockly.Msg.SETLEFTRGB_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTRGB_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTWHITE = "set left white";  // untranslated
Blockly.Msg.SETLEFTWHITE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTWHITE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETLEFTYELLOW = "set left yellow";  // untranslated
Blockly.Msg.SETLEFTYELLOW_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETLEFTYELLOW_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTBLUE = "set right blue";  // untranslated
Blockly.Msg.SETRIGHTBLUE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTBLUE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTCYAN = "set right cyan";  // untranslated
Blockly.Msg.SETRIGHTCYAN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTCYAN_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTGREEN = "set right green";  // untranslated
Blockly.Msg.SETRIGHTGREEN_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTGREEN_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTORANGE = "set right orange";  // untranslated
Blockly.Msg.SETRIGHTORANGE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTORANGE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTPINK = "set right pink";  // untranslated
Blockly.Msg.SETRIGHTPINK_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTPINK_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTPURPLE = "set right purple";  // untranslated
Blockly.Msg.SETRIGHTPURPLE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTPURPLE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTRED = "set right red";  // untranslated
Blockly.Msg.SETRIGHTRED_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTRED_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTRGB = "set right color";  // untranslated
Blockly.Msg.SETRIGHTRGB_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTRGB_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTWHITE = "set right white";  // untranslated
Blockly.Msg.SETRIGHTWHITE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTWHITE_TOOLTIP = "";  // untranslated
Blockly.Msg.SETRIGHTYELLOW = "set right yellow";  // untranslated
Blockly.Msg.SETRIGHTYELLOW_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SETRIGHTYELLOW_TOOLTIP = "";  // untranslated
Blockly.Msg.SETUP = "setup";  // untranslated
Blockly.Msg.SET_ALL_PIXEL_RGB = "set all pixels to";  // untranslated
Blockly.Msg.SET_ALL_PIXEL_RGB_COLOUR = "set all pixels to";  // untranslated
Blockly.Msg.SET_ALL_PIXEL_RGB_COLOUR_TOOLTIP = "";  // untranslated
Blockly.Msg.SET_ALL_PIXEL_RGB_TOOLTIP = "";  // untranslated
Blockly.Msg.SET_ANIMATION_BOOLEAN_FIELD_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html";  // untranslated
Blockly.Msg.SET_ANIMATION_BOOLEAN_FIELD_VI_TOOLTIP = "Sets the boolean value for the selected animation property";  // untranslated
Blockly.Msg.SET_ANIMATION_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html";  // untranslated
Blockly.Msg.SET_ANIMATION_NUMERIC_FIELD_TOOLTIP = "Sets the numeric value for the selected animation property";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY = "set animation.";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY_DROPDOWN_FRAMENAME = "frameName";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY_DROPDOWN_UPDATE = "updateIfVisible";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#destroy";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY_TOOLTIP = "Set a property from the animation manager on the object";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#destroy";  // untranslated
Blockly.Msg.SET_ANIMATION_PROPERTY_VI_TOOLTIP = "Set a property from the animation manager on the object";  // untranslated
Blockly.Msg.SET_ANIMATION_STRING_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html";  // untranslated
Blockly.Msg.SET_ANIMATION_STRING_FIELD_TOOLTIP = "Sets the string value for the selected animation property";  // untranslated
Blockly.Msg.SET_ATTRIBUTE_DOM = "for dom element";  // untranslated
Blockly.Msg.SET_ATTRIBUTE_TITLE = "set Attribute";  // untranslated
Blockly.Msg.SET_BODY_BOOLEAN_FIELD = "set boolean field";  // untranslated
Blockly.Msg.SET_BODY_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.SET_BODY_BOOLEAN_FIELD_TOOLTIP = "Set the value of the specified boolean field";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_CLASS_VI = "set point field";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_CLASS_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_CLASS_VI_TOOLTIP = "Set the value of the body point field";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_TOOLTIP = "Set the x or y value of the specified field";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI = "set point field";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI_DIRECTION = "direction for";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI_DROPDOWN_DELTA = "deltaMax";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI_DROPDOWN_OFFSET = "offset";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI_DROPDOWN_TILE = "tilePadding";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.SET_BODY_FIELD_POINT_VI_TOOLTIP = "Set the x or y value of the specified field";  // untranslated
Blockly.Msg.SET_BODY_NUMERIC_FIELD = "set numeric field";  // untranslated
Blockly.Msg.SET_BODY_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html";  // untranslated
Blockly.Msg.SET_BODY_NUMERIC_FIELD_TOOLTIP = "Set the value of the specified numeric field";  // untranslated
Blockly.Msg.SET_BOOLEAN_FIELD = "set boolean field";  // untranslated
Blockly.Msg.SET_CHILD_INDEX = "to index";  // untranslated
Blockly.Msg.SET_CHILD_INDEX_CHILD = "move the child";  // untranslated
Blockly.Msg.SET_CHILD_INDEX_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#setChildIndex";  // untranslated
Blockly.Msg.SET_CHILD_INDEX_TOOLTIP = "Moves the child to a specific index on its parent. This will affect how you find it in the future.";  // untranslated
Blockly.Msg.SET_CHILD_INDEX_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#setChildIndex";  // untranslated
Blockly.Msg.SET_CHILD_INDEX_VI_TOOLTIP = "Moves the child to a specific index on its parent. This will affect how you find it in the future.";  // untranslated
Blockly.Msg.SET_EMIT_FROM = "set emit from";  // untranslated
Blockly.Msg.SET_EMIT_FROM_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Particles.Arcade.Emitter.html#emitX";  // untranslated
Blockly.Msg.SET_EMIT_FROM_TOOLTIP = "Set where the particles emit from, by individual coordinate.";  // untranslated
Blockly.Msg.SET_EYES = "set eyes";  // untranslated
Blockly.Msg.SET_EYES_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SET_EYES_TOOLTIP = "Sets the color of both eyes.";  // untranslated
Blockly.Msg.SET_FRAME = "Set Current Frame # For";  // untranslated
Blockly.Msg.SET_FRAME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#frame";  // untranslated
Blockly.Msg.SET_FRAME_TOOLTIP = "Jumps to a given animation frame.";  // untranslated
Blockly.Msg.SET_FRAME_VI = "set current frame # to";  // untranslated
Blockly.Msg.SET_FRAME_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html#frame";  // untranslated
Blockly.Msg.SET_FRAME_VI_TOOLTIP = "Sets the current frame number on the specified object";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_BOOLEAN_FIELD = "set boolean field";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_BOOLEAN_FIELD_TOOLTIP = "Set a boolean property on the object";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_NUMERIC_FIELD = "set numeric field";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_NUMERIC_FIELD_TOOLTIP = "Set a numeric property on the object";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_POINT_FIELD = "set point field";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_POINT_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html";  // untranslated
Blockly.Msg.SET_GAME_OBJECT_POINT_FIELD_TOOLTIP = "Set a point property on the object";  // untranslated
Blockly.Msg.SET_GAME_PAUSE = "set game paused to";  // untranslated
Blockly.Msg.SET_GAME_PAUSE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html#paused";  // untranslated
Blockly.Msg.SET_GAME_PAUSE_TOOLTIP = "Gets and sets the paused state of the Game.";  // untranslated
Blockly.Msg.SET_HEIGHT_DOM = "DOM variable";  // untranslated
Blockly.Msg.SET_HEIGHT_HELP_URL = "";  // untranslated
Blockly.Msg.SET_HEIGHT_TITLE = "set height";  // untranslated
Blockly.Msg.SET_HEIGHT_TOOLTIP = "";  // untranslated
Blockly.Msg.SET_IMMOVABLE = "Set Immovable for Object";  // untranslated
Blockly.Msg.SET_IMMOVABLE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html#immovable";  // untranslated
Blockly.Msg.SET_IMMOVABLE_TOOLTIP = "Immovable bodies don't recoil from impacts at all. If two immovable bodies overlap or collide, it is ignored. Yes, we're sidestepping the question of unstoppable force versus immovable object.";  // untranslated
Blockly.Msg.SET_INPUT_HANDLER_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#toc-3";  // untranslated
Blockly.Msg.SET_INPUT_HANDLER_BOOLEAN_FIELD_TOOLTIP = "Sets the boolean fields of the input handler";  // untranslated
Blockly.Msg.SET_INPUT_HANDLER_NUMERIC_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#toc-3";  // untranslated
Blockly.Msg.SET_INPUT_HANDLER_NUMERIC_FIELD_TOOLTIP = "Sets the numeric fields of the input handler";  // untranslated
Blockly.Msg.SET_INPUT_HANDLER_POINT_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.InputHandler.html#toc-3";  // untranslated
Blockly.Msg.SET_INPUT_HANDLER_POINT_FIELD_TOOLTIP = "Sets the point fields of the input handler";  // untranslated
Blockly.Msg.SET_LEFT_EYE = "set left eye";  // untranslated
Blockly.Msg.SET_LEFT_EYE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SET_LEFT_EYE_TOOLTIP = "Sets the color of the left eye.";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_GET_MEMBER_NAME = "get %1";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_HELP_URL = "";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_INSTANCE_DEFAULT = "class";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_IN_INSTANCE = "in %1 instance";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_MEMBER_NAME_DEFUALT = "set value of";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_SET_MEMBER_NAME = "set %1 to";  // untranslated
Blockly.Msg.SET_MEMBER_IN_CLASS_TOOLTIP = "Access the calling instance.";  // untranslated
Blockly.Msg.SET_NUMERIC_FIELD = "set numeric field";  // untranslated
Blockly.Msg.SET_OBJECT_ANCHOR = "set anchor for";  // untranslated
Blockly.Msg.SET_OBJECT_ANCHOR_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#anchor";  // untranslated
Blockly.Msg.SET_OBJECT_ANCHOR_TOOLTIP = "Sets an object's anchor.";  // untranslated
Blockly.Msg.SET_OBJECT_WIDTH = "set width of ";  // untranslated
Blockly.Msg.SET_OBJECT_WIDTH_HELP_URL = "http://dragondrop.digipen.edu/docs/PIXI.Sprite.html#width";  // untranslated
Blockly.Msg.SET_OBJECT_WIDTH_TOOLTIP = "Sets the width of an object.";  // untranslated
Blockly.Msg.SET_PHYSICS_BOOLEAN_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html";  // untranslated
Blockly.Msg.SET_PHYSICS_BOOLEAN_FIELD_TOOLTIP = "Sets the boolean value for the selected physics property";  // untranslated
Blockly.Msg.SET_PHYSICS_POINT_FIELD_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.html";  // untranslated
Blockly.Msg.SET_PHYSICS_POINT_FIELD_TOOLTIP = "Sets the point value for the selected physics property";  // untranslated
Blockly.Msg.SET_PIXEL_RGB = "set";  // untranslated
Blockly.Msg.SET_PIXEL_RGB_COLOUR = "set";  // untranslated
Blockly.Msg.SET_PIXEL_RGB_COLOUR_TOOLTIP = "";  // untranslated
Blockly.Msg.SET_PIXEL_RGB_PIXEL = "pixel";  // untranslated
Blockly.Msg.SET_PIXEL_RGB_TOOLTIP = "";  // untranslated
Blockly.Msg.SET_POINT_FIELD = "set point field";  // untranslated
Blockly.Msg.SET_POS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#position";  // untranslated
Blockly.Msg.SET_POS_TOOLTIP = "Sets the individual x or y coordinate of an object.";  // untranslated
Blockly.Msg.SET_RIGHT_EYE = "set right eye";  // untranslated
Blockly.Msg.SET_RIGHT_EYE_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SET_RIGHT_EYE_TOOLTIP = "Sets the color of the right eye.";  // untranslated
Blockly.Msg.SET_ROTATION = "set the rotation of";  // untranslated
Blockly.Msg.SET_ROTATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#angle";  // untranslated
Blockly.Msg.SET_ROTATION_TOOLTIP = "Directly sets the rotation (in degrees) of this game object to the given value.";  // untranslated
Blockly.Msg.SET_SCALE = "Scale";  // untranslated
Blockly.Msg.SET_SCALE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#scale";  // untranslated
Blockly.Msg.SET_SCALE_MIN_MAX = "set scale constraints on";  // untranslated
Blockly.Msg.SET_SCALE_MIN_MAX_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#setScaleMinMax";  // untranslated
Blockly.Msg.SET_SCALE_MIN_MAX_TOOLTIP = "Limits how far this sprite will scale based on its parent.";  // untranslated
Blockly.Msg.SET_SCALE_TOOLTIP = "Sets the given object's width and height.";  // untranslated
Blockly.Msg.SET_SCALE_VI = "scale";  // untranslated
Blockly.Msg.SET_SCALE_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#scale";  // untranslated
Blockly.Msg.SET_SCALE_VI_TOOLTIP = "Sets the given object's width and height.";  // untranslated
Blockly.Msg.SET_SOUND_BOOLEAN_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html";  // untranslated
Blockly.Msg.SET_SOUND_BOOLEAN_MEMBER_TOOLTIP = "Set the selected member on the Sound";  // untranslated
Blockly.Msg.SET_SOUND_NUMERIC_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html";  // untranslated
Blockly.Msg.SET_SOUND_NUMERIC_MEMBER_TOOLTIP = "Set the selected member on the Sound";  // untranslated
Blockly.Msg.SET_SPRITE_FRAME = "Set texture frame of";  // untranslated
Blockly.Msg.SET_SPRITE_FRAME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#setFrame";  // untranslated
Blockly.Msg.SET_SPRITE_FRAME_TOOLTIP = "Sets the Texture frame the Sprite uses for rendering. This is primarily an internal method used by Sprite.loadTexture, although you may call it directly.";  // untranslated
Blockly.Msg.SET_STRING_FIELD = "set string field";  // untranslated
Blockly.Msg.SET_TEXT = "set text for";  // untranslated
Blockly.Msg.SET_TEXTURE = "Set texture of";  // untranslated
Blockly.Msg.SET_TEXTURE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#setTexture";  // untranslated
Blockly.Msg.SET_TEXTURE_TOOLTIP = "Sets the texture of the sprite. Be warned that this doesn't remove or destroy the previous texture this Sprite was using. Note that this takes a specific texture, not a tag.";  // untranslated
Blockly.Msg.SET_TEXT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Text.html#setText";  // untranslated
Blockly.Msg.SET_TEXT_TOOLTIP = "Sets what phaser text will display on the screen.";  // untranslated
Blockly.Msg.SET_TEXT_VI = "set text for";  // untranslated
Blockly.Msg.SET_TEXT_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Text.html#setText";  // untranslated
Blockly.Msg.SET_TEXT_VI_TOOLTIP = "Sets what phaser text will display on the screen.";  // untranslated
Blockly.Msg.SET_TIME_NUMERIC_MEMBER_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Time.html";  // untranslated
Blockly.Msg.SET_TIME_NUMERIC_MEMBER_TITLE = "set";  // untranslated
Blockly.Msg.SET_TIME_NUMERIC_MEMBER_TO = "to";  // untranslated
Blockly.Msg.SET_TIME_NUMERIC_MEMBER_TOOLTIP = "Write to one of the game time's numeric fields.";  // untranslated
Blockly.Msg.SET_VELOCITY = "Set Velocity";  // untranslated
Blockly.Msg.SET_VELOCITY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html#velocity";  // untranslated
Blockly.Msg.SET_VELOCITY_TOOLTIP = "Sets an objects velocity. This is a combination of speed and direction.";  // untranslated
Blockly.Msg.SET_WIDTH_DOM = "DOM variable";  // untranslated
Blockly.Msg.SET_WIDTH_HELP_URL = "";  // untranslated
Blockly.Msg.SET_WIDTH_TITLE = "set width";  // untranslated
Blockly.Msg.SET_WIDTH_TOOLTIP = "";  // untranslated
Blockly.Msg.SET_WORLD_BOUNDS = "set world bounds";  // untranslated
Blockly.Msg.SET_WORLD_BOUNDS_HEIGHT = "height:";  // untranslated
Blockly.Msg.SET_WORLD_BOUNDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.World.html#setBounds";  // untranslated
Blockly.Msg.SET_WORLD_BOUNDS_TOOLTIP = "Updates the size of the world and sets the leftmost corner";  // untranslated
Blockly.Msg.SET_WORLD_BOUNDS_WIDTH = "width:";  // untranslated
Blockly.Msg.SIMPLE_GYRO_NAVIGATION = "simple gyro navigation";  // untranslated
Blockly.Msg.SIMPLE_GYRO_NAVIGATION_TOOLTIP = "";  // untranslated
Blockly.Msg.SIMPLE_NAVIGATION = "simple navigation";  // untranslated
Blockly.Msg.SIMPLE_NAVIGATION_TOOLTIP = "";  // untranslated
Blockly.Msg.SINCE_START = "since start";  // untranslated
Blockly.Msg.SNAP = "snap";  // untranslated
Blockly.Msg.SOUND_FADE_IN = "fade in sound";  // untranslated
Blockly.Msg.SOUND_FADE_IN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#fadeIn";  // untranslated
Blockly.Msg.SOUND_FADE_IN_LOOP = "milliseconds loop";  // untranslated
Blockly.Msg.SOUND_FADE_IN_TOOLTIP = "Starts/Restarts the sound sets the volume to zero and increases from 0 to 1 over duration";  // untranslated
Blockly.Msg.SOUND_FADE_OUT = "fade out sound";  // untranslated
Blockly.Msg.SOUND_FADE_OUT_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#fadeOut";  // untranslated
Blockly.Msg.SOUND_FADE_OUT_TOOLTIP = "Fades the sounds volume to 0 over the given duration";  // untranslated
Blockly.Msg.SOUND_FADE_TO = "fade sound";  // untranslated
Blockly.Msg.SOUND_FADE_TO_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#fadeTo";  // untranslated
Blockly.Msg.SOUND_FADE_TO_TOOLTIP = "Fades the sounds volume to a given volume over the given duration";  // untranslated
Blockly.Msg.SOUND_FADE_TO_VOLUME = "to volume";  // untranslated
Blockly.Msg.SOUND_LOOP_FULL = "loop sound";  // untranslated
Blockly.Msg.SOUND_LOOP_FULL_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#loopFull";  // untranslated
Blockly.Msg.SOUND_LOOP_FULL_TOOLTIP = "Loops the entire sound";  // untranslated
Blockly.Msg.SOUND_PAUSE = "pause sound";  // untranslated
Blockly.Msg.SOUND_PAUSE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#pause";  // untranslated
Blockly.Msg.SOUND_PAUSE_TOOLTIP = "Pause the sound";  // untranslated
Blockly.Msg.SOUND_PLAY = "play sound";  // untranslated
Blockly.Msg.SOUND_PLAY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#play";  // untranslated
Blockly.Msg.SOUND_PLAY_POSITION = "starting at position";  // untranslated
Blockly.Msg.SOUND_PLAY_TOOLTIP = "Play the sound";  // untranslated
Blockly.Msg.SOUND_RESTART = "restart sound";  // untranslated
Blockly.Msg.SOUND_RESTART_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#restart";  // untranslated
Blockly.Msg.SOUND_RESTART_POSITION = "starting at position";  // untranslated
Blockly.Msg.SOUND_RESTART_TOOLTIP = "Restart the entire sound";  // untranslated
Blockly.Msg.SOUND_RESUME = "resume sound";  // untranslated
Blockly.Msg.SOUND_RESUME_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#resume";  // untranslated
Blockly.Msg.SOUND_RESUME_TOOLTIP = "Resumes the sound";  // untranslated
Blockly.Msg.SOUND_STOP = "stop sound";  // untranslated
Blockly.Msg.SOUND_STOP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sound.html#stop";  // untranslated
Blockly.Msg.SOUND_STOP_TOOLTIP = "Stops the sound";  // untranslated
Blockly.Msg.SOURCE = "source";  // untranslated
Blockly.Msg.SPEED = "speed";  // untranslated
Blockly.Msg.SPINLEFT = "spin left";  // untranslated
Blockly.Msg.SPINLEFT_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SPINLEFT_TOOLTIP = "Spins the wink robot to the left";  // untranslated
Blockly.Msg.SPINRIGHT = "spin right";  // untranslated
Blockly.Msg.SPINRIGHT_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.SPINRIGHT_TOOLTIP = "Spins the wink robot to the right";  // untranslated
Blockly.Msg.SPRITE = "sprite";  // untranslated
Blockly.Msg.SPRITE_OVERLAP = "overlap with";  // untranslated
Blockly.Msg.SPRITE_OVERLAP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#overlap";  // untranslated
Blockly.Msg.SPRITE_OVERLAP_TOOLTIP = "Checks to see if the rectangular bounds of the two given sprites overlap. Not a good substitute for the physics engine, but fine for something like UI.";  // untranslated
Blockly.Msg.START_ARCADE_PHYSICS = "start arcade physics system";  // untranslated
Blockly.Msg.START_ARCADE_PHYSICS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.html#startSystem";  // untranslated
Blockly.Msg.START_ARCADE_PHYSICS_TOOLTIP = "Start the specified arcade physics system";  // untranslated
Blockly.Msg.START_PHASER_FOR_STATES = "start phaser for states with";  // untranslated
Blockly.Msg.START_PHASER_FOR_STATES_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html";  // untranslated
Blockly.Msg.START_PHASER_FOR_STATES_TOOLTIP = "Create a Phaser game using explicit states.";  // untranslated
Blockly.Msg.START_PHYSICS = "start";  // untranslated
Blockly.Msg.START_PHYSICS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.html#startSystem";  // untranslated
Blockly.Msg.START_PHYSICS_SYSTEM = "physics system";  // untranslated
Blockly.Msg.START_PHYSICS_SYSTEM_DROPDOWN_ARCADE = "Arcade";  // untranslated
Blockly.Msg.START_PHYSICS_SYSTEM_DROPDOWN_P2JS = "P2JS";  // untranslated
Blockly.Msg.START_PHYSICS_TOOLTIP = "Start physics with the specified system";  // untranslated
Blockly.Msg.START_TIMER = "start timer";  // untranslated
Blockly.Msg.START_TIMER_TOOLTIP = "Start timer after a given delay in milliseconds";  // untranslated
Blockly.Msg.START_TIMER_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#start";  // untranslated
Blockly.Msg.STATEMANAGER_ADD_STATE = "add state";  // untranslated
Blockly.Msg.STATEMANAGER_ADD_STATE_TOOLTIP = "Adds a state to the game engine, this should be an instance of a state class.";  // untranslated
Blockly.Msg.STATEMANAGER_ADD_STATE_TO_MANAGER = "to state manager";  // untranslated
Blockly.Msg.STATEMANAGER_CHECK_STATE = "is valid state?";  // untranslated
Blockly.Msg.STATEMANAGER_CHECK_STATE_HELP_URL = "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#checkState";  // untranslated
Blockly.Msg.STATEMANAGER_CHECK_STATE_TOOLTIP = "Returns if a given phaser state is valid. A State is considered valid if it has at least one of the core functions: preload, create, update or render.";  // untranslated
Blockly.Msg.STATEMANAGER_GET_CURRENT_STATE = "get current state";  // untranslated
Blockly.Msg.STATEMANAGER_GET_CURRENT_STATE_HELP_URL = "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#getCurrentState";  // untranslated
Blockly.Msg.STATEMANAGER_GET_CURRENT_STATE_TOOLTIP = "Gets the current State";  // untranslated
Blockly.Msg.STATEMANAGER_RESTART_STATE = "restart state";  // untranslated
Blockly.Msg.STATEMANAGER_RESTART_STATE_HELP_URL = "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#restart";  // untranslated
Blockly.Msg.STATEMANAGER_RESTART_STATE_TOOLTIP = "Restarts the current State. State.shutDown will be called (if it exists) before the State is restarted.";  // untranslated
Blockly.Msg.STATEMANAGER_START_STATE = "start state with tag";  // untranslated
Blockly.Msg.STATEMANAGER_START_STATE_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.StateManager.html#start";  // untranslated
Blockly.Msg.STATEMANAGER_START_STATE_TOOLTIP = "Start the specified state, this should be a state that has been added to the game engine";  // untranslated
Blockly.Msg.STEP = "Step";  // untranslated
Blockly.Msg.STEP_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Game.html#step";  // untranslated
Blockly.Msg.STEP_TOOLTIP = "Manually steps to the next game loop. Stepping should be enabled before using this.";  // untranslated
Blockly.Msg.STOP_ANIMATION = "stop animation on";  // untranslated
Blockly.Msg.STOP_ANIMATION_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#stop";  // untranslated
Blockly.Msg.STOP_ANIMATION_TOOLTIP = "Stops any animation from playing on the given sprite.";  // untranslated
Blockly.Msg.STOP_ANIMATION_VI = "stop animation on";  // untranslated
Blockly.Msg.STOP_ANIMATION_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Animation.html#stop";  // untranslated
Blockly.Msg.STOP_ANIMATION_VI_TOOLTIP = "Stops the current animation on the specified Sprite";  // untranslated
Blockly.Msg.STOP_BODY_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Physics.Arcade.Body.html#stop";  // untranslated
Blockly.Msg.STOP_BODY_TEXT = "stop body";  // untranslated
Blockly.Msg.STOP_BODY_TOOLTIP = "stops any existing movement or acceleration of the body";  // untranslated
Blockly.Msg.STOP_PAUSE_RESUME_SOUNDS = "all sounds";  // untranslated
Blockly.Msg.STOP_PAUSE_RESUME_SOUNDS_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.SoundManager.html#stopAll";  // untranslated
Blockly.Msg.STOP_PAUSE_RESUME_SOUNDS_OPTION_DROPDOWN_PAUSE = "pause";  // untranslated
Blockly.Msg.STOP_PAUSE_RESUME_SOUNDS_OPTION_DROPDOWN_RESUME = "resume";  // untranslated
Blockly.Msg.STOP_PAUSE_RESUME_SOUNDS_OPTION_DROPDOWN_STOP = "stop";  // untranslated
Blockly.Msg.STOP_PAUSE_RESUME_SOUNDS_TOOLTIP = "Stop - Stop everything dead. Pause - Stop everything, but remember where you were. Resume - Start playing paused sounds from where they left off.";  // untranslated
Blockly.Msg.STOP_TIMER = "stop timer";  // untranslated
Blockly.Msg.STOP_TIMER_CLEAR_EVENTS = "clear events";  // untranslated
Blockly.Msg.STOP_TIMER_TOOLTIP = "Stops the timer and all events in the queue, if auto destroy is true this will not cause it to be destroyed";  // untranslated
Blockly.Msg.STOP_TIMER_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#stop";  // untranslated
Blockly.Msg.SUBTRACT = "subtract";  // untranslated
Blockly.Msg.SUPER = "super";  // untranslated
Blockly.Msg.SWAP_CHILDREN = "swap children of";  // untranslated
Blockly.Msg.SWAP_CHILDREN_1 = "child 1";  // untranslated
Blockly.Msg.SWAP_CHILDREN_2 = "child 2";  // untranslated
Blockly.Msg.SWAP_CHILDREN_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.Sprite.html#swapChildren";  // untranslated
Blockly.Msg.SWAP_CHILDREN_TOOLTIP = "Swaps the indices of the given children. They must both be on the same parent.";  // untranslated
Blockly.Msg.SWITCH_AMBIENT_TO_EDGE = "switch ambient to edge";  // untranslated
Blockly.Msg.SWITCH_AMBIENT_TO_EDGE_TOOLTIP = "";  // untranslated
Blockly.Msg.SWITCH_BUTTON_TO_PIXELS = "switch button to pixels";  // untranslated
Blockly.Msg.SWITCH_BUTTON_TO_PIXELS_TOOLTIP = "Sets shared line to control NeoPixel lights";  // untranslated
Blockly.Msg.SWITCH_EDGE_TO_AMBIENT = "switch ambient to edge";  // untranslated
Blockly.Msg.SWITCH_EDGE_TO_AMBIENT_TOOLTIP = "";  // untranslated
Blockly.Msg.SWITCH_MOTORS_TO_SERIAL = "switch motors to serial";  // untranslated
Blockly.Msg.SWITCH_MOTORS_TO_SERIAL_TOOLTIP = "";  // untranslated
Blockly.Msg.SWITCH_PIXELS_TO_BUTTON = "switch pixels to button";  // untranslated
Blockly.Msg.SWITCH_PIXELS_TO_BUTTON_TOOLTIP = "Sets shared line to control NeoPixel lights";  // untranslated
Blockly.Msg.TAG = "tag";  // untranslated
Blockly.Msg.TAGGED = "tagged";  // untranslated
Blockly.Msg.TAIL_BOTTOM = "tail bottom";  // untranslated
Blockly.Msg.TAIL_TOP = "tail top";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "dodaj besedilo";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "k";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Doda besedilo k spremenljivki '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "v male črke";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "v Velike Začetnice";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "v VELIKE ČRKE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Vrne kopijo besedila v drugi obliki.";
Blockly.Msg.TEXT_CHARAT_FIRST = "vrni prvo črko";
Blockly.Msg.TEXT_CHARAT_FROM_END = "vrni črko št. od konca";
Blockly.Msg.TEXT_CHARAT_FROM_START = "vrni črko št.";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "iz besedila";
Blockly.Msg.TEXT_CHARAT_LAST = "vrni zadnjo črko";
Blockly.Msg.TEXT_CHARAT_RANDOM = "vrni naključno črko";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Vrne črko na določenem mestu v besedilu.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Doda element k besedilu.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "združi";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Doda, odstrani ali spremeni vrstni red elementov tega besedila.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "do črke št. od konca";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "do črke št.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "do zadnje črke";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "iz besedila";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "vrni del od prve črke";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "vrni del od črke št. od konca";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "vrni del od črke št.";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Vrne določen del besedila.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "v besedilu";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "najdi prvo pojavitev besedila";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "najdi zadnjo pojavitev besedila";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Vrne mesto (indeks) prve/zadnje pojavitve drugega besedila v prvem besedilu. Če besedila ne najde, vrne %1.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 je prazno";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Vrne resnično, če je določeno besedilo prazno.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "ustvari besedilo iz";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Ustvari besedilo tako, da združi poljubno število elementov.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "dolžina %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Vrne število črk oz. znakov (vključno s presledki) v določenem besedilu.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "izpiši %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Izpiše določeno besedilo, število ali drugo vrednost.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Vpraša uporabnika za vnos števila.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Vpraša uporabnika za vnos besedila.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "vprašaj za število s sporočilom";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "vprašaj za besedilo s sporočilom";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Črka, beseda ali vrstica besedila.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "odstrani presledke z obeh strani";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "odstrani presledke z leve strani";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "odstrani presledke z desne strani";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Vrne kopijo besedila z odstranjenimi presledki z ene ali obeh strani.";
Blockly.Msg.THIS_REFERENCE_HELP_URL = "https://en.wikipedia.org/wiki/This_(computer_programming)";  // untranslated
Blockly.Msg.THIS_REFERENCE_TOOLTIP = "Access the calling instance.";  // untranslated
Blockly.Msg.TIMEOUT = "timeout";  // untranslated
Blockly.Msg.TIMER = "timer";  // untranslated
Blockly.Msg.TIMER_ADD_EVENT = "add event to timer";  // untranslated
Blockly.Msg.TIMER_ADD_EVENT_TOOLTIP = "Fire the event after the specified delay after the start of the timer";  // untranslated
Blockly.Msg.TIMER_ADD_EVENT_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#add";  // untranslated
Blockly.Msg.TIMER_CONSTANTS_TOOLTIP = "Constants for some common values in milliseconds";  // untranslated
Blockly.Msg.TIMER_LOOP_EVENT = "loop event on timer";  // untranslated
Blockly.Msg.TIMER_LOOP_EVENT_TOOLTIP = "Loops the given event forever or until the timer is stopped or destroyed";  // untranslated
Blockly.Msg.TIMER_LOOP_EVENT_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#loop";  // untranslated
Blockly.Msg.TIMER_REPEAT_EVENT = "repeat event on timer";  // untranslated
Blockly.Msg.TIMER_REPEAT_EVENT_COUNT = "times";  // untranslated
Blockly.Msg.TIMER_REPEAT_EVENT_TOOLTIP = "Loops the given event forever or until the timer is stopped or destroyed";  // untranslated
Blockly.Msg.TIMER_REPEAT_EVENT_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#loop";  // untranslated
Blockly.Msg.TIMER_SET_ON_COMPLETE_CALLBACK = "when timer";  // untranslated
Blockly.Msg.TIMER_SET_ON_COMPLETE_CALLBACK_COMPLETED = "completes call";  // untranslated
Blockly.Msg.TIMER_SET_ON_COMPLETE_CALLBACK_TOOLTIP = "Called when the timer completes all of the actions in its queue. This will not be called if the timer is stopped or destroyed before it completes its queue.";  // untranslated
Blockly.Msg.TIMER_SET_ON_COMPLETE_CALLBACK_URL = "http://dragondrop.digipen.edu/docs/Phaser.Timer.html#onComplete";  // untranslated
Blockly.Msg.TO = "to";  // untranslated
Blockly.Msg.TODAY = "Danes";
Blockly.Msg.TONE_PIN_FREQ = "play frequency";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_DURATION = "play frequency";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_DURATION_HELP_URL = "https://www.arduino.cc/en/Reference/Tone";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_DURATION_PIN = "on pin #";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_DURATION_TOOLTIP = "";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_HELP_URL = "https://www.arduino.cc/en/Reference/Tone";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_PIN = "on pin #";  // untranslated
Blockly.Msg.TONE_PIN_FREQ_TOOLTIP = "";  // untranslated
Blockly.Msg.TOPDOWN = "topdown";  // untranslated
Blockly.Msg.TOPDOWN_TIGHT = "topdown tight";  // untranslated
Blockly.Msg.TOP_CENTER = "top center";  // untranslated
Blockly.Msg.TOP_LEFT = "top left";  // untranslated
Blockly.Msg.TOP_RIGHT = "top right";  // untranslated
Blockly.Msg.TURN = "turn";  // untranslated
Blockly.Msg.TURNEYESOFF = "turn eyes off";  // untranslated
Blockly.Msg.TURNEYESOFF_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.TURNEYESOFF_TOOLTIP = "";  // untranslated
Blockly.Msg.TURNLEFTEYEOFF = "turn left eye off";  // untranslated
Blockly.Msg.TURNLEFTEYEOFF_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.TURNLEFTEYEOFF_TOOLTIP = "";  // untranslated
Blockly.Msg.TURNRIGHTEYEOFF = "turn right eye off";  // untranslated
Blockly.Msg.TURNRIGHTEYEOFF_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.TURNRIGHTEYEOFF_TOOLTIP = "";  // untranslated
Blockly.Msg.TURN_BY_VALUES_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.TURN_BY_VALUES_TOOLTIP = "Turns the robot at the specified speed for the specified duration in the specified direction - either left or right. Negative values are accepted.";  // untranslated
Blockly.Msg.TYPED_ARRAYS_CREATE_WITH = "create array of";  // untranslated
Blockly.Msg.TYPED_ARRAYS_DELETE = "delete array";  // untranslated
Blockly.Msg.TYPED_ARRAYS_DELETE_HELP_URL = "";  // untranslated
Blockly.Msg.TYPED_ARRAYS_DELETE_TOOLTIP = "";  // untranslated
Blockly.Msg.TYPED_ARRAYS_GETINDEX = "get index #";  // untranslated
Blockly.Msg.TYPED_ARRAYS_GETINDEX_HELP_URL = "";  // untranslated
Blockly.Msg.TYPED_ARRAYS_GETINDEX_TOOLTIP = "";  // untranslated
Blockly.Msg.TYPED_ARRAYS_NOT_ARRAY_WARNING = "%1 is not an array!";  // untranslated
Blockly.Msg.TYPED_ARRAYS_SETINDEX = "set index #";  // untranslated
Blockly.Msg.TYPED_ARRAYS_SETINDEX_HELP_URL = "";  // untranslated
Blockly.Msg.TYPED_ARRAYS_SETINDEX_TOOLTIP = "";  // untranslated
Blockly.Msg.TYPE_BOOL = "Boolean";  // untranslated
Blockly.Msg.TYPE_BOOL_ARR = "Array of Booleans";  // untranslated
Blockly.Msg.TYPE_CHAR = "Character";  // untranslated
Blockly.Msg.TYPE_FLOAT = "Float";  // untranslated
Blockly.Msg.TYPE_FLOAT_ARR = "Array of Floats";  // untranslated
Blockly.Msg.TYPE_INT = "Integer";  // untranslated
Blockly.Msg.TYPE_INT_ARR = "Array of Integers";  // untranslated
Blockly.Msg.TYPE_SERVO = "Servo";  // untranslated
Blockly.Msg.TYPE_STRING = "String";  // untranslated
Blockly.Msg.TYPE_STRING_ARR = "Array of Strings";  // untranslated
Blockly.Msg.UNDO = "Razveljavi";
Blockly.Msg.UP = "up";  // untranslated
Blockly.Msg.USING = "using";  // untranslated
Blockly.Msg.VALIDATE_FRAMES = "validate animation frames of ";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_ARRAY = "array of frames";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#validateFrames";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_TOOLTIP = "Validates the frames on the given Sprite.";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_VI = "validate animation frames of ";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_VI_ARRAY = "array of frames";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_VI_HELP_URL = "http://dragondrop.digipen.edu/docs/Phaser.AnimationManager.html#validateFrames";  // untranslated
Blockly.Msg.VALIDATE_FRAMES_VI_TOOLTIP = "Validates the frames on the given Sprite.";  // untranslated
Blockly.Msg.VALUE = "value";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "element";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Ustvari 'nastavi %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Vrne vrednost spremenljivke.";
Blockly.Msg.VARIABLES_SET = "nastavi %1 na %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Ustvari 'vrni %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Nastavi, da je vrednost spremenljivke enaka vnosu.";
Blockly.Msg.VARIABLE_ALREADY_EXISTS = "Spremenljivka »%1« že obstaja.";
Blockly.Msg.VARIABLE_SET_TYPED_DEFAULT_VAR = "item";  // untranslated
Blockly.Msg.VARIABLE_SET_TYPED_HELP_URL = "";  // untranslated
Blockly.Msg.VARIABLE_SET_TYPED_TOOLTIP = "";  // untranslated
Blockly.Msg.VECTOR_TO_DEGREES = "vector to degrees";  // untranslated
Blockly.Msg.VECTOR_TO_DEGREES_TOOLTIP = "";  // untranslated
Blockly.Msg.VECTOR_TO_DEGREES_X = "x component";  // untranslated
Blockly.Msg.VECTOR_TO_DEGREES_Y = "y component";  // untranslated
Blockly.Msg.VELOCITY = "velocity";  // untranslated
Blockly.Msg.VERTICAL = "vertical";  // untranslated
Blockly.Msg.WHEN_IR_DONE = "when IR is done";  // untranslated
Blockly.Msg.WIDTH = "width";  // untranslated
Blockly.Msg.WINK_EXPLORER_BASE_EYE_TEXT_1 = "Sets the ";  // untranslated
Blockly.Msg.WINK_EXPLORER_BASE_EYE_TEXT_2 = " to be ";  // untranslated
Blockly.Msg.WINK_EXPLORER_BASE_EYE_TEXT_ENDING = " with the specified intensity from 0-255.";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_BLUE = "Sets both eyes to be blue with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_CYAN = "Sets both eyes to be cyan with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_GREEN = "Sets both eyes to be green with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_OFF = "Turns off both of the eyes.";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_ORANGE = "Sets both eyes to be orange with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_PINK = "Sets both eyes to be pink with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_PURPLE = "Sets both eyes to be purple with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_RED = "Sets both eyes to be red with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_RGB = "Sets both eyes to be the specified Red, Green, and Blue values.";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_SELECT = "Sets both eyes to be the specified color with max intensity.";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_WHITE = "Sets both eyes to be white with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYES_BOTH_YELLOW = "Sets both eyes to be yellow with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_BLUE = "Sets the left eye to be blue with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_CYAN = "Sets the left eye to be cyan with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_GREEN = "Sets the left eye to be green with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_OFF = "Turns off the left eye.";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_ORANGE = "Sets the left eye to be orange with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_PINK = "Sets the left eye to be pink with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_PURPLE = "Sets the left eye to be purple with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_RED = "Sets the left eye to be red with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_RGB = "Sets the left eye to be the specified Red, Green, and Blue values.";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_SELECT = "Sets the left eye to be the specified color with max intensity.";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_WHITE = "Sets the left eye to be white with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_LEFT_YELLOW = "Sets the left eye to be yellow with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_BLUE = "Sets the right eye to be blue with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_CYAN = "Sets the right eye to be cyan with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_GREEN = "Sets the right eye to be green with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_OFF = "Turns off the right eye.";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_ORANGE = "Sets the right eye to be orange with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_PINK = "Sets the right eye to be pink with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_PURPLE = "Sets the right eye to be purple with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_RED = "Sets the right eye to be red with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_RGB = "Sets the right eye to be the specified Red, Green, and Blue values.";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_SELECT = "Sets the right eye to be the specified color with max intensity.";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_WHITE = "Sets the right eye to be white with the specified intensity";  // untranslated
Blockly.Msg.WINK_EYE_RIGHT_YELLOW = "Sets the right eye to be yellow with the specified intensity";  // untranslated
Blockly.Msg.WINK_GENERAL_HELP_URL = "http://www.plumgeek.com/learn-to-code.html/";  // untranslated
Blockly.Msg.WINK_MOVEMENT_BACKWARD_FAST = "Moves the wink robot backward at a fast(90) speed.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_BACKWARD_MODERATE = "Moves the wink robot backward at a moderate(50) speed.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_BACKWARD_SLOW = "Moves the wink robot backward at a slow(30) speed.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_FORWARD_FAST = "Moves the wink robot forward at a fast(90) speed.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_FORWARD_MODERATE = "Moves the wink robot forward at a moderate(50) speed.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_FORWARD_SLOW = "Moves the wink robot forward at a slow(30) speed.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_ROTATION_LEFT = "Rotates the wink robot left by roughly the specified number of degrees.";  // untranslated
Blockly.Msg.WINK_MOVEMENT_ROTATION_RIGHT = "Rotates the wink robot right by roughly the specified number of degrees.";  // untranslated
Blockly.Msg.WITH = "with";  // untranslated
Blockly.Msg.WITHIN = "within";  // untranslated
Blockly.Msg.WITH_FRAMES = "with frames";  // untranslated
Blockly.Msg.WORLDBOUNCE = "worldBounce";  // untranslated
Blockly.Msg.X = "x";  // untranslated
Blockly.Msg.XCOLON = "x:";  // untranslated
Blockly.Msg.XML = "texture atlas xml";  // untranslated
Blockly.Msg.Y = "y";  // untranslated
Blockly.Msg.YCOLON = "y:";  // untranslated
Blockly.Msg.ZERO_NAVIGATION = "reset navigation";  // untranslated
Blockly.Msg.ZERO_NAVIGATION_TOOLTIP = "";  // untranslated
Blockly.Msg.CONTROLS_DOWHILE_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;